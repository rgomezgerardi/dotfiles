:PROPERTIES:
:author: Ricardo Gomez
:email:  rgomezgerardi@gmail.com
:title:  Emacs Custom Configuration 
:header-args+: :tangle init.el
:header-args+: :tangle-mode (identity #o755)
:header-args+: :noweb strip-export
:header-args+: :cache yes
:END:

* Order
Order of blocks that must be tangle before the rest.

#+begin_src emacs-lisp :tangle early-init.el
<<library>>

<<straight>>

<<use-package>>

<<gcmh>>

<<exec-path-from-shell>>

<<no-littering>>

<<general>>

<<doom-themes>>
#+end_src

* Editing
Basic text editing facilities.

#+begin_src emacs-lisp :tangle no
 help
#+end_src

** COMMENT Editing Basics
Most basic editing facilities.

#+begin_src emacs-lisp
(setq-default tab-width 4)  ; Distance between tab stops, in columns
#+end_src

** Electricity
Electric behavior for self inserting keys.


*** COMMENT Electric

#+begin_src emacs-lisp
(use-package electric :straight (:type built-in)
  :demand
  :custom
  (electric-indent-inhibit t)
  (electric-indent-chars '(?\n ?\^?))
  :config
  (electric-indent-mode 0)
  (electric-layout-mode 0))
#+end_src

*** Pair

#+begin_src emacs-lisp
(use-package elec-pair :straight (:type built-in)
  :demand
  :custom
  (electric-pair-pairs '((?\" . ?\") (?\{ . ?\})))
  :config
  (electric-pair-mode 1))
#+end_src

** COMMENT Smartparens
A minor mode for dealing with pairs in Emacs.
https://github.com/Fuco1/smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :hook ((prog-mode
		  text-mode
		  conf-mode) . (lambda ()
						 (smartparens-mode 1)
						 (show-smartparens-mode 1)))
  :config ())  ; Show message if verbose is activated
  ;; :config
  ;; (add-hook 'minibuffer-setup-hook 'turn-on-smartparens-strict-mode))
  ;; (smartparens-global-strict-mode 1))
;;sp-ignore-mode-list
#+end_src

** Emulations
Emulations of other editors.

*** Evil
Extensible Vi layer for Emacs.
https://github.com/emacs-evil/evil

#+begin_src emacs-lisp
(use-package evil
  :demand
  :custom
  (evil-respect-visual-line-mode t)
  (evil-shift-width 4)
  (evil-undo-system 'undo-tree)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-want-C-i-jump nil)
  (evil-want-C-u-scroll nil)
  (evil-want-integration t)
  (evil-want-keybinding nil)
  (evil-auto-indent nil)
  (evil-echo-state nil)
  :config
  (evil-mode 1)
  :general
  ('insert
   "C-g" #'evil-normal-state)
  :gfhook
  ; Issue: https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately
  ('after-init-hook #'(lambda (&rest _)
       (when-let ((messages-buffer (get-buffer "*Messages*")))
         (with-current-buffer messages-buffer
           (evil-normalize-keymaps)))) nil nil t))
#+end_src

**** Collection
A set of keybindings for Evil mode
https://github.com/emacs-evil/evil-collection

#+begin_src emacs-lisp
(use-package evil-collection
  :demand
  :after evil
  :custom
  (evil-collection-setup-minibuffer t)
  ;; (evil-collection-outline-bind-tab-p nil)
  :config
  (evil-collection-init))
#+end_src

***** Agenda
Supplemental evil-mode key-bindings to Emacs org-mode.
https://github.com/Somelauw/evil-org-mode

#+begin_src emacs-lisp
(use-package evil-org
  :demand
  :after (evil evil-collection org)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

**** Comment
Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
https://github.com/redguardtoo/evil-nerd-commenter

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :after evil
  :preface
  (defun counsel-imenu-comments ()
	(interactive)
	(let* ((imenu-create-index-function 'evilnc-imenu-create-index-function))
	  (unless (featurep 'counsel) (require 'counsel))
	  (counsel-imenu)))
  :general
  ('motion
   "M-;" 'evilnc-comment-or-uncomment-lines))
#+end_src

**** Surround
https://github.com/emacs-evil/evil-surround

#+begin_src elisp
(use-package evil-surround
  :after evil
  :demand
  :config
  (global-evil-surround-mode 1)
)
#+end_src

**** Goggles 
Displays a visual hint when editing with evil.
https://github.com/edkolev/evil-goggles

#+begin_src emacs-lisp
(use-package evil-goggles
  :demand
  :after evil
  :custom
  (evil-goggles-duration 0.3)
  (evil-goggles-async-duration 0.9)
  :config
  (custom-set-faces
   '(evil-goggles-default-face ((t (:inherit region :background "gray60")))))
  (evil-goggles-mode 1))
#+end_src
   
**** COMMENT Smartparens
Evil smartparens is a minor mode which makes evil play nice with smartparens.
https://github.com/expez/evil-smartparens

#+begin_src emacs-lisp
(use-package evil-smartparens
  :after evil
  ;; :hook
  ;; (electric-pair-mode . #'evil-smartparens-mode)
  ;; :config
  ;; (evil-smart--mode 1)
)
#+end_src

*** Vi Tilde Fringe
Displays tildes in the fringe on empty lines a la Vi.
https://github.com/syl20bnr/vi-tilde-fringe

#+begin_src emacs-lisp
(use-package vi-tilde-fringe
  :hook (prog-mode . vi-tilde-fringe-mode)
; Disable for some modes
  ((treemacs-mode
    dashboard-mode) . (lambda () (vi-tilde-fringe-mode 0)))
  :config ())  ; Show message if verbose is activated
#+end_src

** Fill
Indenting and filling text.

#+begin_src emacs-lisp
;; (setq-default fill-column 120)
;; (setq fill-column 120)
#+end_src

** Visual Line
Editing based on visual line, rather than logical lines.

#+begin_src emacs-lisp
(use-package visual-line :straight (:type built-in)
  :hook ((text-mode outline-mode) . visual-line-mode)
  :custom
  (visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  :config ())  ; Show message if verbose is activated
#+end_src
   
** COMMENT Indent
Indentation commands.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode t)
#+end_src

** COMMENT Killing
Killing and yanking commands.

#+begin_src emacs-lisp
(setq backward-delete-char-untabify-method 'hungry)
#+end_src

** Matching
Various sorts of searching and matching.

*** Isearch
Incremental search minor mode.

#+begin_src emacs-lisp
(use-package isearch :straight (:type built-in)
  :demand
  :general
  (isearch-mode-map
   "M-e" 'consult-isearch                 ;; orig. isearch-edit-string
   "M-s e" 'consult-isearch               ;; orig. isearch-edit-string
   "M-s l" 'consult-line                  ;; needed by consult-line to detect isearch
   "M-s L" 'consult-line-multi)           ;; needed by consult-line to detect isearch
  )
#+end_src

** COMMENT Mouse
Input from the mouse.

#+begin_src emacs-lisp
  ; Zoom In/Out
  (general-def
    "<C-wheel-up>" 'text-scale-increase
    "<C-wheel-down>" 'text-scale-decrease)
#+end_src

** Undo
Undoing changes in buffers.

*** Undo Tree
Treat undo history as a tree
https://gitlab.com/tsc25/undo-tree

#+begin_src emacs-lisp
(use-package undo-tree
  :demand
  :config (global-undo-tree-mode))
#+end_src

** YASnippet
A template system for Emacs.
https://github.com/joaotavora/yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  ;; :ghook ('(conf-mode-hook prog-mode-hook text-mode-hook) #'yas-minor-mode)
  :demand
  :config 
  (yas-global-mode 1)
)  ; Show message if verbose is activated
#+end_src

*** YASnippet Snippets
Yasnippet official snippet collections
https://github.com/AndreaCrotti/yasnippet-snippets

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

*** Doom Snippets
Doom Emacs' Snippet Library
https://github.com/hlissner/doom-snippets

#+begin_src emacs-lisp
(use-package doom-snippets
  :straight (doom-snippets :type git :host github :repo "hlissner/doom-snippets" :files ("*.el" "*"))
  :after yasnippet)
#+end_src

** COMMENT Tempel
Simple templates for Emacs
https://github.com/minad/tempel

#+begin_src elisp
(use-package tempel
  :demand

  )
#+end_src

** Paren Matching
Highlight (un)matching of parens and expressions.

#+begin_src emacs-lisp
(use-package paren :straight (:type built-in)
  :demand
  :custom
  (show-paren-style 'parenthesis)
  (show-paren-delay 0.125)
  (blink-matching-paren t)
  (blink-matching-delay 1)
  :config
  (show-paren-mode 1))
#+end_src

* Convenience
Convenience features for faster editing.

** COMMENT Abbreviations
Abbreviation handling, typing shortcuts, macros.

** Completion
*** Corfu
Completion Overlay Region FUnction
https://github.com/minad/corfu

#+begin_src emacs-lisp
(use-package corfu
  :demand
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-delay 0)
  (corfu-auto-prefix 2)
  :config
  (corfu-global-mode 1)
  :general
  (corfu-map
   "M-j" #'corfu-next
   "M-k" #'corfu-previous))
#+end_src

**** Cape
Let your completions fly!
https://github.com/minad/cape

#+begin_src emacs-lisp
(use-package cape
  :after corfu
  :demand
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-ispell)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  (add-to-list 'completion-at-point-functions #'cape-line)
  (add-to-list 'completion-at-point-functions #'cape-rfc1345)
  (add-to-list 'completion-at-point-functions #'cape-sgml)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  (add-to-list 'completion-at-point-functions #'cape-tex)
  :general 
  (leader-def
   "c p" #'completion-at-point ;; capf
   "c a" #'cape-abbrev
   "c d" #'cape-dabbrev        ;; or dabbrev-completion
   "c w" #'cape-dict
   "c f" #'cape-file
   "c i" #'cape-ispell
   "c k" #'cape-keyword
   "c l" #'cape-line
   "c r" #'cape-rfc1345
   "c &" #'cape-sgml
   "c s" #'cape-symbol
   "c t" #'complete-tag        ;; etags
   "c _" #'cape-tex
   "c ^" #'cape-tex
  ))
#+end_src

*** COMMENT Company
Extensible inline text completion framework.
https://github.com/company-mode/company-mode

#+begin_src emacs-lisp
(use-package company
  :demand
  :custom
  (company-minimum-prefix-length 2)
  (company-idle-delay 0)
  :config
  (global-company-mode 1)
  :general
  (company-active-map
   "<tab>" #'company-indent-or-complete-common)
)
#+end_src   

**** COMMENT Company Box
A company front-end with icons.
https://github.com/sebastiencs/company-box/   

#+begin_src emacs-lisp :tangle no
   (use-package company-box
     :after company
     :hook (company-mode . company-box-mode))
#+end_src
 
**** COMMENT Company Emoji
Backend providing autocompletion for emoji.
https://github.com/dunn/company-emoji

#+begin_src emacs-lisp :tangle no
(use-package company-emoji
  :demand
  :after company
  :preface
  (defun --set-emoji-font (frame)
	"Adjust the font settings of FRAME so Emacs can display emoji properly."
	(if (eq system-type 'darwin)
		;; For NS/Cocoa
		(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
      ;; For Linux
      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))
  :config
  ;; For when Emacs is started in GUI mode:
  ;; (--set-emoji-font nil)
  ;; Hook for when a frame is created with emacsclient
  ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
  ;; (add-hook 'after-make-frame-functions '--set-emoji-font)
  (add-to-list 'company-backends 'company-emoji))	
#+end_src

** Dabbrev

#+begin_src emacs-lisp
(use-package dabbrev :straight (:type built-in)
  :general
  (general-swap-key nil 'global
    "M-/" "C-M-/"))
#+end_src

** General
Convenience wrappers for keybindings.
https://github.com/noctuid/general.el

#+begin_src emacs-lisp :tangle no :noweb-ref general
(use-package general
  :demand
  :defines texinfo-section-list
  :config
  ;; (general-auto-unbind-keys)  ; Automatic Key Unbinding
  (general-setq auto-revert-interval 10)

  (defconst leader "SPC")
  (general-create-definer leader-def
    :states '(motion normal insert emacs)
    :keymaps 'override
    :prefix leader
    :non-normal-prefix (concat "M-" leader)
    :prefix-command 'leader-prefix-command
    :prefix-map 'leader-prefix-map)
  
  (general-def "<escape>" #'keyboard-escape-quit))
#+end_src

** COMMENT Hydra
Make bindings that stick around.
https://github.com/abo-abo/hydra

#+begin_src emacs-lisp
  (use-package hydra
	:config
	  (defhydra hydra-zoom (:timeout 4)
		"zoom"
		("l" text-scale-increase "in")
		("h" text-scale-decrease "out")
		("f" nil "finished" :exit t))

	  (defhydra hydra-yank-pop ()
		"yank"
		("C-y" yank nil)
		("M-y" yank-pop nil)
		("y" (yank-pop 1) "next")
		("Y" (yank-pop -1) "prev")
		("l" helm-show-kill-ring "list" :color blue))   ; or browse-kill-ring
	:general
	  (leader-def
		"z z" '(hydra-zoom/body :which-key "scale text")
		"M-y" '(hydra-yank-pop/yank-pop :which-key "yank pop")
		"C-y" '(hydra-yank-pop/yank :which-key "yank")))
#+end_src

** Rainbow
Show color strings with a background color.
https://github.com/emacsmirror/rainbow-mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :preface
  (defun rainbow-turn-off-hexadecimal ()
    "Turn off hexadecimal colours in rainbow-mode."
    (interactive)
    (font-lock-remove-keywords
     nil
     `(,@rainbow-hexadecimal-colors-font-lock-keywords))
    (font-lock-fontify-buffer))

  (defun rainbow-turn-off-words ()
    "Turn off word colours in rainbow-mode."
    (interactive)
    (font-lock-remove-keywords
     nil
     `(,@rainbow-x-colors-font-lock-keywords))
    (font-lock-fontify-buffer))
  :hook ((prog-mode text-mode) . rainbow-mode)
  :config ())  ; Show message if verbose is activated
#+end_src

*** Rainbow Delimiters
Highlight brackets according to their depth
https://github.com/Fanael/rainbow-delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :config ())  ; Show message if verbose is activated
#+end_src

*** COMMENT Rainbow Identifiers
Highlight identifiers according to their names
https://github.com/Fanael/rainbow-identifiers

#+begin_src emacs-lisp
(use-package rainbow-identifiers
  :hook (prog-mode . rainbow-identifiers-mode)
  :config ())  ; Show message if verbose is activated
#+end_src

** Good Scroll
Attempt at good pixel-based smooth scrolling in Emacs.
https://github.com/io12/good-scroll.el

#+begin_src emacs-lisp
(use-package good-scroll
:demand
:preface
:custom
(good-scroll-step 50)
:config
(good-scroll-mode 1)
:general
("<wheel-up>"   'good-scroll-up
 "<wheel-down>" 'good-scroll-down
 ;; [remap scroll-up-command]          'good-scroll-up
 ;; [remap scroll-down-command]          'good-scroll-down
 [next] #'good-scroll-up-full-screen
 [prior] #'good-scroll-down-full-screen))
#+end_src
   
** Highlight Parentheses
A minor mode to highlight parentheses surrounding point.

#+begin_src emacs-lisp
(use-package highlight-parentheses
  :hook ((prog-mode text-mode) . highlight-parentheses-mode)
  :config ())  ; Show message if verbose is activated
#+end_src

** Highlight Numbers
An Emacs minor mode that highlights numeric literals in source code.
https://github.com/Fanael/highlight-numbers

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook ((prog-mode text-mode) . highlight-numbers-mode)
  :config ())  ; Show message if verbose is activated
;; '(highlight-numbers-number ((t (:foreground "#f0ad6d"))))
#+end_src

** COMMENT Display Fill Column Indicator
Display a fill column indicator in the buffer.
https://github.com/alpaker/fill-column-indicator

#+begin_src emacs-lisp
(use-package display-fill-column-indicator :straight (:type built-in)
  :hook ((prog-mode text-mode) . display-fill-column-indicator-mode)
  :custom
  (dfci-rule-color "#111122")
  (dfci-rule-use-dashes nil)
  (dfci-rule-width 1)
  (dfci-rule-color "darkblue"))
#+end_src
   
** Beacon
Never lose your cursor again
https://github.com/Malabarba/beacon

#+begin_src emacs-lisp
(use-package beacon
  :demand
  :custom
  (beacon-size 40)
  (beacon-color 0.6)
  ;; (beacon-blink-duration)
  ;; (beacon-blink-delay)
  (beacon-blink-when-window-scrolls t)
  (beacon-blink-when-window-changes t)
  (beacon-blink-when-focused t)
  (beacon-blink-when-point-moves t)
  ;; (beacon-dont-blink-major-modes)
  ;; (beacon-dont-blink-predicates)
  ;; (beacon-dont-blink-commands)
  ;; (beacon-push-mark)
  :config
  ;; Disable it only in specific buffers
  ;; (setq-local beacon-mode nil).
  (beacon-mode 1))
#+end_src

** COMMENT Whitespace
Visualize blanks (TAB, (HARD) SPACE and NEWLINE).

#+begin_src emacs-lisp
(use-package whitespace :straight nil
  :hook (gdscript-mode . whitespace-mode)
  :custom
  (whitespace-display-mappings  ; Specify an alist of mappings for displaying characters
   '((tab-mark 9 [8677 9] [92 9])  ;| 124  ⇥ 8677  ⇨ 8680  ↦ 8614
     (space-mark 32 [183] [46])
     (newline-mark 10 [182 10])))
  (whitespace-style '(tabs tab-mark))  ; Specify which kind of blank is visualized
  ; Tabs tab-mark trailing indentation indentation::tab indentation::space
  :custom-face
  (whitespace-tab ((t (:foreground "#c1c1c1"))))
)
#+end_src

** Tab
** COMMENT Centaur Tabs
Display a tab bar in the header line.
https://github.com/ema2159/centaur-tabs

#+begin_src emacs-lisp
(use-package centaur-tabs
  :demand
  :preface
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode'
`emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
      ((string-equal "*" (substring (buffer-name) 0 1)) "Emacs")
      ((derived-mode-p 'eshell-mode) "EShell")
      ((derived-mode-p 'emacs-lisp-mode) "Elisp")
      ((derived-mode-p 'dired-mode) "Dired")
      ((derived-mode-p 'org-agenda) "Agenda")

      ((memq major-mode '(magit-process-mode
			  magit-status-mode
			  magit-diff-mode
			  magit-log-mode
			  magit-file-mode
			  magit-blob-mode
			  magit-blame-mode
			  ))
       "Magit")
      ((memq major-mode '(org-agenda-mode
			  org-agenda-clockreport-mode
			  org-agenda-log-mode
			  diary-mode))
       "Agenda")
      (t
 (defun centaur-tabs-hide-tab (x)
  "Do no to show buffer X in tabs."
  (let ((name (format "%s" x)))
    (or
     ;; Current window is not dedicated window.
     (window-dedicated-p (selected-window))

     ;; Buffer name not match below blacklist.
     (string-prefix-p "*epc" name)
     (string-prefix-p "*helm" name)
     (string-prefix-p "*Helm" name)
     (string-prefix-p "*Compile-Log*" name)
     (string-prefix-p "*lsp" name)
     (string-prefix-p "*company" name)
     (string-prefix-p "*Flycheck" name)
     (string-prefix-p "*tramp" name)
     (string-prefix-p " *Mini" name)
     (string-prefix-p "*help" name)
     (string-prefix-p "*straight" name)
     (string-prefix-p " *temp" name)
     (string-prefix-p "*Help" name)
     (string-prefix-p "*mybuf" name)

     ;; Is not magit buffer.
     (and (string-prefix-p "magit" name)
	  (not (file-name-extension name)))
     )))      (centaur-tabs-get-group-name (current-buffer)))))
  :hook
  ((dired-mode 
    help-mode helpful-mode
    special-mode
    term-mode calendar-mode
    delayed-warning
    debugger-mode
    ibuffer-mode buffer-menu-mode
    messages-buffer-mode
    org-agenda-mode
    dashboard-mode 
    org-src-mode
    ;; org-beamer-mode
    ;; org-indent-mode
    ;; org-bullets-mode
    ;; org-cdlatex-mode
    popup-buffer-mode) . centaur-tabs-local-mode)
  :custom
  (centaur-tabs-style "bar")
  (centaur-tabs-height 32)
  (centaur-tabs-set-icons t)
  (centaur-tabs-set-bar 'left)
  (centaur-tabs-cycle-scope 'tabs)
  :config
  (centaur-tabs-mode 1)
  (centaur-tabs-group-by-projectile-project)
  :general
  ('motion
   "M-l" '(centaur-tabs-forward :which-key "Next tab")
   "M-h" '(centaur-tabs-backward :which-key "Previous tab")
   )
  (leader-def
    "t t" '(centaur-tabs--create-new-tab :which-key "New tab")
    "t l" '(centaur-tabs-forward-group :which-key "Go to next tab group")
    "t h" '(centaur-tabs-backward-group :which-key "Go to previous tab group")
    "t G" '(centaur-tabs-select-end-tab :which-key "Select the last tab of the group")
    "t s" '(centaur-tabs-counsel-switch-group :which-key "Show buffer groups")
    "t p" '(centaur-tabs-group-by-projectile-project :which-key "Group by projectile project")
    "t g" '(centaur-tabs-group-buffer-groups :which-key "Use centaur's buffer grouping")
    ;; "t g g" '(centaur-tabs-select-beg-tab :which-key "Select the first tab of the group")
  )
)
#+end_src

*** COMMENT b
#+begin_src emacs-lisp
(use-package centaur-tabs
  :custom
  ;; (centaur-tabs-plain-icons nil)
  ;; (centaur-tabs-gray-out-icons 'buffer)
  ;; (centaur-tabs-set-bar 'left)
  ;; (x-underline-at-descent-line t)  ; Set this only if centaur-tabs-set-bar is 'under
  ;; (centaur-tabs-set-modified-marker t)
  ;; (centaur-tabs-close-button "✕")
  ;; (centaur-tabs-modified-marker "•")
  :config
  (centaur-tabs-mode 1)

#+end_src

** COMMENT Tab Bar
Frame-local tabs.

#+begin_src emacs-lisp :tangle no
(use-package tab-bar
  :demand
  :custom
  ; Defines what to do when the last tab is closed
  (tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
  (tab-bar-close-tab-select 'left)
  (tab-bar-new-tab-choice "*scratch*")
  (tab-bar-show 1)
  :config
  (tab-bar-mode 1)
  :general
  ('motion
    "M-l" '(tab-bar-switch-to-next-tab :which-key "Next tab")
    "M-h" '(tab-bar-switch-to-prev-tab :which-key "Previous tab")
    )

  (leader-def
    "t"   '(:ignore t :which-key "tab")
    "t f" '(find-file-other-tab :which-key "Edit file in another tab")
    "t t" '(tab-bar-new-tab :which-key "New tab")
    "t q" '(tab-bar-close-tab :which-key "Close tab")
    "t c" '(tab-bar-close-other-tabs :which-key "Close all tabs, except the selected one")
    "t r" '(tab-bar-switch-to-recent-tab :which-key "Recent tab")
    "t l" '(tab-bar-switch-to-next-tab :which-key "Next tab")
    "t h" '(tab-bar-switch-to-prev-tab :which-key "Previous tab")
    "t u" '(tab-bar-undo-close-tab :which-key "Restore the last closed tab")
    ;; "t h" '(tab-bar-history-mode :which-key "Toggle tab history mode")

    )
)
    ; Rebind join, and lookup (default K and J vim keybindigs)
    ;; "k" '(evil-lookup :which-key "Look up the keyword at point")
    ;; "j" '(evil-join :which-key "Join the selected lines")
#+end_src

** Treemacs
A tree layout file explorer for Emacs
https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :hook
  ((gdscript-mode) . (lambda () (save-selected-window (treemacs-select-window))))
  :custom
  ;; (treemacs-display-in-side-window          nil)
  ;; (treemacs-expand-after-init               t)
  ;; (treemacs-position                        'left)
  ;; (treemacs-silent-filewatch                nil)
  ;; (treemacs-silent-refresh                  nil)
  ;; (treemacs-sorting                         'alphabetic-asc)
  ;; (treemacs-user-mode-line-format           "none")
  (treemacs-width                           28)
  (treemacs-follow-after-init t)
  (treemacs-no-delete-other-windows nil)
  :config
  (add-hook
   'gdscript-mode-hook
   (lambda () (run-with-timer 10.0 nil #'treemacs-select-window)))
  (treemacs-follow-mode t)
  ;; (treemacs-tag-follow-mode t)
  ;; (treemacs-display-current-project-exclusively)
  (treemacs-fringe-indicator-mode 'always)
  (treemacs-git-mode 'simple)
  (treemacs-filewatch-mode t)
  (treemacs-indent-guide-mode t)
  (treemacs-project-follow-mode t)
  (treemacs-hide-gitignored-files-mode nil)

  ;; (pcase (cons (not (null (executable-find "git")))
  ;;              (not (null treemacs-python-executable)))
  ;;   (`(t . t)
  ;;    (treemacs-git-mode 'deferred))
  ;;   (`(t . _)
  ;;    (treemacs-git-mode 'simple)))
  :general
  ("M-0"   #'treemacs-select-window)
  (leader-def
	"0 0" #'treemacs
	"0 b" #'treemacs-bookmark
	"0 t" #'treemacs-find-tag
	"0 f" #'treemacs-find-file
	"0 d" #'treemacs-delete-other-windows
	)
)
#+end_src
   
*** Evil
Evil integration in treemacs
https://github.com/Alexander-Miller/treemacs/blob/master/src/extra/treemacs-evil.el

#+begin_src elisp
(use-package treemacs-evil
  :after (treemacs evil)
  :demand)
#+end_src

*** Projectile
Allow quickly add your projectile projects to treemacs.
https://github.com/Alexander-Miller/treemacs

#+begin_src elisp
(use-package treemacs-projectile
  :after (treemacs projectile)
  :demand)
#+end_src

*** Git

#+begin_src elisp
(use-package treemacs-magit
  :after (treemacs magit)
  :demand)
#+end_src

*** COMMENT Icons Dired

#+begin_src elisp
(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)
#+end_src

*** COMMENT Persp

#+begin_src elisp
(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :demand
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src

** Folding
*** COMMENT Origami
A text folding minor mode for Emacs.
https://github.com/gregsexton/origami.el

#+begin_src emacs-lisp
(setq byte-compile-warnings '(cl-functions))  ; Disable "Package cl is deprecated" message

(use-package origami
:demand
:config
(global-origami-mode 1))
#+end_src>

*** Vimish Fold

#+begin_src elisp
(use-package vimish-fold
  :after evil
  :demand
  :config
  (vimish-fold-global-mode 1))
#+end_src

**** Evil Vimish Fold

#+begin_src elisp
(use-package evil-vimish-fold
  :after (evil vimish-fold)
  :demand
  :hook ((prog-mode conf-mode text-mode) . evil-vimish-fold-mode))
#+end_src

* Files
Support for editing files.

#+begin_src emacs-lisp
(use-package files :straight (:type built-in)
  :demand
  :preface
  (defun +/save-buffers-kill-emacs (&optional arg)
	"Offer to save each buffer(once only, no modified buffers exist asking), then kill this Emacs process.
With prefix ARG, silently save all file-visiting buffers, then kill."
	(interactive "P")
	(save-some-buffers arg t)
	(and (or (not (fboundp 'process-list))
		 ;; process-list is not defined on MSDOS.
		 (let ((processes (process-list))
		       active)
		   (while processes
		     (and (memq (process-status (car processes)) '(run stop open listen))
			  (process-query-on-exit-flag (car processes))
			  (setq active t))
		     (setq processes (cdr processes)))
		   (or (not active)
		       (progn (list-processes t)
			      (yes-or-no-p "Active processes exist; kill them and exit anyway? ")))))
	     ;; Query the user for other things, perhaps.
	     (run-hook-with-args-until-failure 'kill-emacs-query-functions)
	     (or (null confirm-kill-emacs)
		 (funcall confirm-kill-emacs "Really exit Emacs? "))
	     (kill-emacs)))
  :custom
  (vc-handled-backends nil)
  (vc-follow-symlinks t)
  (vc-git-print-log-follow nil)
  (find-file-visit-truename t)
  :config
  (fset 'save-buffers-kill-emacs '+/save-buffers-kill-emacs)
  :general
  (leader-def
    "f" '(:ignore t :which-key "file")
    "f f" #'(find-file :wk "find")
    "f c" #'((lambda () (interactive) (find-file "~/.config/emacs/TANGLE.org")) :wk "config")
    "b k" #'(kill-current-buffer :wk "kill current buffer")
    "b K" #'(kill-buffer :wk "kill buffer")
    "b n" #'(next-buffer :wk "next buffer")
    "b p" #'(previous-buffer :wk "previous buffer")
))
#+end_src

** Auto Revert
Revert individual buffers when files on disk change.

#+begin_src emacs-lisp
(use-package autorevert :straight (:type built-in)
  :demand
  :custom
  (auto-revert-interval 3)
  (global-auto-revert-non-file-buffers t)
  :config
  (global-auto-revert-mode 1))
#+end_src

** COMMENT Backup 
Backups of edited data files.

#+begin_src emacs-lisp :tangle early-init.el
(setq
make-backup-files nil
backup-inhibited nil
)
#+end_src

** COMMENT Dired
Directory editing.

#+begin_src emacs-lisp :tangle no
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-listing-switches "-ahl -v --group-directories-first")
  (dired-auto-revert-buffer t)  ; Automatically revert Dired buffers on revisiting their directory
  (dired-dwim-target t)  ; suggest a target for moving/copying intelligently
  (dired-hide-details-hide-symlink-targets nil)
  (dired-recursive-copies  'always)  ; Always copy/delete recursively
  (dired-recursive-deletes 'top)  ; Whether dired deletes directories recursively
  (dired-create-destination-dirs 'ask)
  :config
  ; Don't complain about this command being disabled when we use it
  (put 'dired-find-alternate-file 'disabled nil)
  :general
  (:states 'normal :keymaps 'dired-mode-map
	  "h" #'dired-up-directory
	  "l" #'dired-find-file))

;; single invocation example
;; (general-translate-key nil 'evil-normal-state-keymap
;;   "n" "j"
;;   "e" "k"
;;   ...)
;; cycling keys en masse
;; (dolist (keymap keymaps-with-hjkl-keybindings)
;;   (general-translate-key 'normal keymap
;;     ;; colemak hnei is qwerty hjkl
;;     "n" "j"
;;     "e" "k"
;;     "i" "l"
;;     ;; add back nei
;;     "j" "e"
;;     "k" "n"
;;     "l" "i"))
#+end_src


*** All the Icons Dired
A library for inserting Developer icons
https://github.com/domtronn/all-the-icons.el

#+begin_src emacs-lisp :tangle no
  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
    
*** Ranger

#+begin_src emacs-lisp
  ;; (use-package ranger
  ;; :demand
  ;; :init (ranger-override-dired-mode t))
  ;; :init (setq ranger-override-dired t))
  ;; :custom 
  ;; (ranger-cleanup-on-disable t)
  ;; (ranger-excluded-extensions '("mkv" "iso" "mp4"))
  ;; (ranger-deer-show-details t)
  ;; (ranger-max-preview-size 10)
  ;; (ranger-show-literal nil)
  ;; (ranger-hide-cursor nil)
#+end_src

*** Rsync
Asynchronous rsync from dired
https://github.com/stsquad/dired-rsync

#+begin_src emacs-lisp :tangle no
(use-package dired-rsync
  :general
  (dired-mode-map "C-c C-r" 'dired-rsync))
#+end_src>

*** Diredfl
Extra font lock rules for a more colourful dired
https://github.com/purcell/diredfl

#+begin_src emacs-lisp :tangle no
(use-package diredfl
  :hook (dired-mode . diredfl-mode))
#+end_src>

*** Diredx

#+begin_src emacs-lisp :tangle no
  (use-package dired-x
	:straight nil
	:hook (dired-mode . dired-omit-mode)
	:config
	(setq dired-omit-verbose nil
		  dired-omit-files
		  (concat dired-omit-files
				  "\\|^.DS_Store\\'"
				  "\\|^.project\\(?:ile\\)?\\'"
				  "\\|^.\\(svn\\|git\\)\\'"
				  "\\|^.ccls-cache\\'"
				  "\\|\\(?:\\.js\\)?\\.meta\\'"
				  "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))
	;; Disable the prompt about whether I want to kill the Dired buffer for a
	;; deleted directory. Of course I do!
	(setq dired-clean-confirm-killing-deleted-buffers nil))
	;; Let OS decide how to open certain files
	;; (map! :map dired-mode-map
	;; 	  :localleader
	;; 	  "h" #'dired-omit-mode))
#+end_src

*** Fd-dired
https://github.com/yqrashawn/fd-dired

#+begin_src emacs-lisp :tangle no
(use-package fd-dired
  :defer t
  :init
  (global-set-key [remap find-dired] #'fd-dired))
#+end_src

*** Dired Aux

#+begin_src emacs-lisp :tangle no
  (use-package dired-aux
	:straight nil
	:defer t
	:config
	(setq dired-create-destination-dirs 'ask
		  dired-vc-rename-file t))
#+end_src

*** Diff-hl
Highlight uncommitted changes using VC
https://github.com/dgutov/diff-hl

#+begin_src emacs-lisp :tangle no
(use-package diff-hl
  :hook 
  (dired-mode . diff-hl-dired-mode-unless-remote)
  (magit-post-refresh . diff-hl-magit-post-refresh)
  :config
  ; use margin instead of fringe
  (diff-hl-margin-mode))
#+end_src>

*** Single
Reuse the current dired buffer to visit a directory
https://github.com/crocket/dired-single

#+begin_src emacs-lisp :tangle no
  (use-package dired-single
    :after dired)
    ;:config
    ;(:keymaps '(dired-mode-map evil-normal-state-map)
    ;(evil-collection-define-key 'normal 'dired-mode-map
     ;"h" 'dired-single-up-directory
     ;"l" 'dired-single-buffer))
#+end_src

*** Hide Dotfiles
Hide dotfiles in dired
https://github.com/mattiasb/dired-hide-dotfiles

#+begin_src emacs-lisp :tangle no
  (use-package dired-hide-dotfiles
    :after dired
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :general
    (dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src    

*** Open
Open files from dired using using custom actions

#+begin_src emacs-lisp :tangle no
  (use-package dired-open
    :after dired
    :commands
    (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    ;; -- OR! --
    (setq dired-open-extensions '(("png" . "sxiv")
				  ("mkv" . "mpv"))))
#+end_src
    
*** Peep Dired
*** Empty

#+begin_src emacs-lisp
  ;(setq split-height-threshold nil)
  ;(setq split-width-threshold 0)

  ;(custom-set-variables
  ; '(ediff-window-setup-function 'ediff-setup-windows-plain)
  ; '(ediff-diff-options "-w")
  ; '(ediff-split-window-function 'split-window-horizontally))
  ;(add-hook 'ediff-after-quit-hook-internal 'winner-undo)

  ;(setq split-width-threshold (- (window-width) 10))
  ;(setq split-height-threshold nil)
  ;
  ;(defun count-visible-buffers (&optional frame)
  ;  "Count how many buffers are currently being shown. Defaults to selected frame."
  ;  (length (mapcar #'window-buffer (window-list frame))))
  ;
  ;(defun do-not-split-more-than-two-windows (window &optional horizontal)
  ;  (if (and horizontal (> (count-visible-buffers) 1))
  ;      nil
  ;    t))
  ;
  ;(advice-add 'window-splittable-p :before-while #'do-not-split-more-than-two-windows)
#+end_src

** COMMENT Find File
Finding files.

** No Litering
Help keeping ~/.config/emacs clean
https://github.com/emacscollective/no-littering

#+begin_src emacs-lisp :tangle no :noweb-ref no-littering
(use-package no-littering
  :demand
  :init
  (setq 
   no-littering-etc-directory (expand-file-name "conf" user-emacs-directory)
   no-littering-var-directory (expand-file-name "data" user-emacs-directory)
   custom-file (expand-file-name "custom.el" user-emacs-directory)
   auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save") t))
   auto-save-list-file-name `((".*" ,(no-littering-expand-var-file-name "auto-save-list") t))
   ;; url-history-file (expand-file-name "data/url/history" user-emacs-directory)))
   url-history-file (no-littering-expand-var-file-name "url/history")))
#+end_src

** Recentf
   
#+begin_src emacs-lisp
(use-package recentf :straight (:type built-in)
  :demand
  :preface
  (defun +/undo-kill-buffer (arg)
    "Re-open the last buffer killed.  With ARG, re-open the nth buffer."
    (interactive "p")
    (let ((recently-killed-list (copy-sequence recentf-list))
	  (buffer-files-list
	   (delq nil (mapcar (lambda (buf)
			       (when (buffer-file-name buf)
				 (expand-file-name (buffer-file-name buf)))) (buffer-list)))))
      (mapc
       (lambda (buf-file)
	 (setq recently-killed-list
	       (delq buf-file recently-killed-list)))
       buffer-files-list)
      (find-file
       (if arg (nth arg recently-killed-list)
	 (car recently-killed-list)))))
  :custom
  (recentf-max-menu-items 16)
  (recentf-max-saved-items 16)
  :config
  (recentf-mode 1)
  (with-eval-after-load 'no-littering
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)))
#+end_src

* Text
Support for editing text files.

** Outlines
Support for hierarchical outlining.

*** Org 
Outline-based notes management and organizer.
https://orgmode.org

#+begin_src emacs-lisp
(use-package org :straight (:type built-in)
  :preface
  (defun +/org-babel-tangle-config ()
    "Tangle a configuration file automatically after save"
    (let ((conf '("CONFIG.org" "README.org" "RUNCOM.org" "TANGLE.org"))
	  (file (file-name-nondirectory(expand-file-name (buffer-file-name)))))
      (when (member file conf)
	(org-babel-tangle))))
  :gfhook
  #'(lambda () (add-hook 'after-save-hook #'+/org-babel-tangle-config))
  ;; #'variable-pitch-mode ;; #'auto-fill-mode ;; #'turn-on-auto-fill
  :config
  <<org-conf>>
  ;; (setq system-time-locale "C") 
  :custom
  (org-support-shift-select 'always)
  (org-modules '(ol-w3m ol-bbdb ol-bibtex ol-docview ol-gnus ol-info ol-irc ol-eww
		 org-habit org-bookmark org-eshell org-tempo))
;; org-toc
  :general
  (:keymaps 'org-capture-mode-map
	    [remap evil-save-and-close]          'org-capture-finalize
	    [remap evil-save-modified-and-close] 'org-capture-finalize
	    [remap evil-quit]                    'org-capture-kill)
  (:states 'normal :keymaps 'org-mode-map
	   "M-j" #'org-next-visible-heading
	   "M-k" #'org-previous-visible-heading
	   "C-j" #'org-metadown
	   "C-'" #'org-edit-special
	   "M-/" '(consult-org-heading :package consult)

	   "C-k" #'org-metaup)

  (:states 'normal :keymaps 'org-src-mode-map
	   "C-'" "C-c '")
  (leader-def :keymaps 'org-mode-map
    "o" '(:ignore t :which-key "org")
    "o d" #'(org-babel-demarcate-block :wk "demarcate block")
    "o c" #'(org-capture :wk "capture")
    "o ;" #'(org-toggle-comment :wk "toggle comment")
    "o :" #'(org-toggle-link-display :wk "toggle link display")
    "o f" #'(org-switchb :wk "switch to agenda file")
    ;; "o t" #'(org-todo :wk "todo")
    "o l" #'(org-store-link :wk "store link")))
#+end_src

**** Config
:PROPERTIES:
:header-args:     :tangle no :noweb-ref org-conf
:END:

***** Appearance
Settings for Org mode appearance.

#+begin_src emacs-lisp
(setq
 org-hide-leading-stars t  ; Non-nil means hide the first N-1 stars in a headline
 org-image-actual-width 300
 org-src-fontify-natively t
 org-hide-emphasis-markers nil
 org-ellipsis " ↴"  ; The ellipsis to use in the Org mode outline (▾  ↴)
 )
#+end_src

****** Org Faces
Faces in Org mode

#+begin_src emacs-lisp
(setq org-fontify-quote-and-verse-blocks t)

(dolist (face 
  '((org-level-1 . 1.2)
	(org-level-2 . 1.18)
	(org-level-3 . 1.16)
	(org-level-4 . 1.14)
	(org-level-5 . 1.12)
	(org-level-6 . 1.1)
	(org-level-7 . 1.1)
	(org-level-8 . 1.1)))
  (set-face-attribute (car face) nil
	   :font "Ubuntu"
	   :weight 'medium
	   :height (cdr face)))

;(set-face-attribute 'org-document-title nil :font "FiraCode Nerd Font" :weight 'bold :height 1.3)

; Ensure that anything that should be fixed-pitch in Org files appears that way
; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
; (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

; ; Get rid of the background on column views
; (set-face-attribute 'org-column nil :background nil)
; (set-face-attribute 'org-column-title nil :background nil)
; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-property-value ((t (:inherit fixed-pitch))) t)
; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

***** Babel
Code block evaluation and management in ‘org-mode’ documents.

#+begin_src emacs-lisp
  ;  (org-babel-do-load-languages
  ;	'org-babel-load-languages
  ;	'((emacs-lisp . t)
  ;	  (ledger . t)))

  ;(defun org-babel-tangle-block()
  ;  (interactive)
  ;  (let ((current-prefix-arg '(4)))
  ;    (call-interactively 'org-babel-tangle)
  ;))

  ; Conf files highlit
;(push '("conf-unix" . conf-unix) org-src-lang-modes)

; Confirm before evaluation
(setq org-confirm-babel-evaluate nil
   org-src-tab-acts-natively t)

; Local Variables:
; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
; End:
;; (add-to-list 'safe-local-variable-values
      ;; '(eval add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t))
#+end_src

****** Tangle

#+begin_src emacs-lisp
(setq
 org-babel-tangle-use-relative-file-links nil
 org-babel-tangle-lang-exts '(("vala" . "vala")
			      ("ruby" . "rb")
			      ("python" . "py")
			      ("picolisp" . "l")
			      ("ocaml" . "ml")
			      ("maxima" . "max")
			      ("lua" . "lua")
			      ("lisp" . "lisp")
			      ("LilyPond" . "ly")
			      ("latex" . "tex")
			      ("java" . "java")
			      ("haskell" . "hs")
			      ("groovy" . "groovy")
			      ("clojurescript" . "cljs")
			      ("clojure" . "clj")
			      ("D" . "d")
			      ("C++" . "cpp")
			      ("emacs-lisp" . "el")
			      ("elisp" . "el"))
)
#+end_src

***** Export
Options for exporting Org mode files.

#+begin_src emacs-lisp
(setq org-export-backends '(ascii html icalendar latex man md odt org))
#+end_src

****** Org Export ODT
Options for exporting Org mode files to ODT.

#+begin_src emacs-lisp
(setq org-odt-preferred-output-format "pdf")  ; Require LibreOffice (docx)
(setq org-odt-category-map-alist
      '(("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p)))
#+end_src

****** Org Export General
General options for export engine.

#+begin_src emacs-lisp
(setq org-export-in-background t
   org-export-with-toc nil)
#+end_src

***** Indent
Options concerning dynamic virtual outline indentation.

***** Structure
Options concerning the general structure of Org files.

****** Cycle
Options concerning visibility cycling in Org mode.

#+begin_src emacs-lisp
(setq org-cycle-separator-lines 2)
#+end_src

****** Edit Structure
Options concerning structure editing in Org mode.

#+begin_src emacs-lisp
(setq
 org-edit-src-content-indentation 0
 org-src-window-setup 'current-window
 org-src-preserve-indentation nil
 org-src-lang-modes '(("C" . c)
		     ("C++" . c++)
		     ("asymptote" . asy)
		     ("bash" . sh)
		     ("beamer" . latex)
		     ("calc" . fundamental)
		     ("cpp" . c++)
		     ("ditaa" . artist)
		     ("dot" . fundamental)
		     ("elisp" . emacs-lisp)
		     ("ocaml" . tuareg)
		     ("screen" . shell-script)
		     ("shell" . sh)
		     ("gdscript" . gdscript)
		     ("vimrc" . vimrc)
		     ("yaml" . yaml)
		     ("opml" . nxml)
		     ("sqlite" . sql))
)

;; (require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

***** Properties
Options concerning properties in Org mode.

#+begin_src emacs-lisp
(setq org-use-property-inheritance t)
#+end_src

***** Tags
Options concerning tags in Org mode.

#+begin_src emacs-lisp
;; (org-align-all-tags)
(setq org-tags-column (- 68 (window-body-width)))
#+end_src

***** COMMENT Todo 
Options concerning TODO items in Org mode.

#+begin_src emacs-lisp
(setq
org-log-done 'time
org-log-into-drawer t
org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)"))
;; "TODO" "NEXT" "HOLD(h)" "DONE"
;; "TODO" "NEXT" "WAIT(w@/!)" "DONE"
)

; Refile
(setq org-refile-targets '((nil :maxlevel . 1)
                           (org-agenda-files :maxlevel . 1)))

; (setq org-refile-targets
      ;; '(("Archive.org" :maxlevel . 1)))

(advice-add 'org-refile :after 'org-save-all-org-buffers)  ; Save Org buffers after refiling!

; Templates
(setq org-capture-templates
  `(("t" "Tasks / Projects")
    ("tt" "Task" entry (file+olp "/mnt/files/Ricardo/Documents/notes/task.org" "Inbox")
         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
    ;; ("ts" "Clocked Entry Subtask" entry (clock)
    ;;      "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

    ("j" "Journal Entries")
    ("jj" "Journal" entry
         (file+olp+datetree "/mnt/files/Ricardo/Documents/notes/journal.org")
         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
         ;; ,(dw/read-file-as-string "~/notes/Templates/Daily.org")
         :clock-in :clock-resume
         :empty-lines 1)
 ho
    ("jm" "Meeting" entry
         (file+olp+datetree "/mnt/files/Ricardo/Documents/notes/journal.org")
         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)

    ;; ("w" "Workflows")
    ;; ("we" "Checking Email" entry (file+olp+datetree ,(dw/get-todays-journal-file-name))
    ;;      "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

    ("m" "Metrics Capture")
    ("mw" "Weight" table-line (file+headline "/mnt/files/Ricardo/Documents/notes/metrics.org" "Weight")
     "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

;; (setq org-capture-templates
;;        '(("t" "todo" entry (file org-default-notes-file)
;; 	  "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
;; 	 ("m" "Meeting" entry (file org-default-notes-file)
;; 	  "* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
;; 	 ("d" "Diary" entry (file+datetree "~/org/diary.org")
;; 	  "* %?\n%U\n" :clock-in t :clock-resume t)
;; 	 ("i" "Idea" entry (file org-default-notes-file)
;; 	  "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
;; 	 ("n" "Next Task" entry (file+headline org-default-notes-file "Tasks")
;; 	  "** NEXT %? \nDEADLINE: %t") ))

;; (define-key global-map (kbd "C-c j")
;;   (lambda () (interactive) (org-capture nil "j")))

;; (require 'org-habit)
;; (add-to-list 'org-modules 'org-habit)
;; (setq org-habit-graph-column 60)
#+end_src

***** Startup

#+begin_src emacs-lisp
(setq
org-startup-align-all-tables t  ; Non-nil means align all tables when visiting a file
org-startup-truncated nil  ; Non-nil means entering Org mode will set truncate-lines
org-startup-with-inline-images t
org-startup-folded t  ; Non-nil means entering Org mode will switch to OVERVIEW
org-hide-block-startup nil
org-startup-indented nil  ; Non-nil means turn on org-indent-mode on startup
)  

;; (setq org-clock-persist 'history)
;; (org-clock-persistence-insinuate)
#+end_src

**** Roam
A plain-text personal knowledge management system.
https://github.com/org-roam/org-roam

#+begin_src emacs-lisp
(use-package org-roam
  :preface
  (defun +/org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
  :custom
  (org-roam-directory (file-truename "/mnt/files/Ricardo/Documents/note"))
  :config
  (org-roam-db-autosync-mode)
  :general
  (leader-def
    "n" '(:ignore t :which-key "note")
    "n b" #'(org-roam-buffer-toggle :wk "buffer")
    "n f" #'(org-roam-node-find :wk "find node")
    "n i" #'(org-roam-node-insert :wk "insert node")
    "n I" #'(+/org-roam-node-insert-immediate :wk "insert node immediate")
))
#+end_src   
   
**** Agenda
Options concerning agenda views in Org mode.

#+begin_src emacs-lisp 
(use-package org-agenda :straight (:type built-in)
  :config
  (setq
  org-agenda-files "/home/user/.config/emacs/agenda-file"
  org-agenda-file-regexp "\\`[^.].*\\(\\.org\\)?\\'"
  org-agenda-sticky t

  ; Start
  org-agenda-start-with-log-mode t

  ; Window
  org-agenda-window-setup 'only-window
  org-agenda-restore-windows-after-quit t

  ; Daily/Weekly
  org-agenda-span 'week
  org-agenda-include-diary nil
  )
  :general
  (leader-def
    "o a"   #'(org-agenda :wk "agenda")
    ;; "" #'(org-agenda-file-to-front :wk "file to front")
  )

  ;; 'org-agenda-mode-map 
  ;; org-toggle-sticky-agenda
)
#+end_src

***** COMMENT Custom Agenda View

#+begin_src emacs-lisp
 ;; Configure custom agenda views
(setq org-agenda-custom-commands
  '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))


    ("W" "Work Tasks" tags-todo "+work")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))
#+end_src

***** COMMENT adf

#+begin_src emacs-lisp
filter by internet connection
(defun my-auto-exclude-fn (tag)
  (when (cond ((string= tag "network")
               (/= 0 (call-process "/sbin/ping" nil nil nil
                                   "-c1" "-q" "google.com"))))
    (concat "-" tag)))

(setq org-agenda-auto-exclude-function #'my-auto-exclude-fn)
#+end_src

**** Superstar
Prettify headings and plain lists in Org mode
https://github.com/integral-dw/org-superstar-mode

#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :ghook 'org-mode-hook
  :custom
  (org-superstar-headline-bullets-list '("●" "◉" "○" "◉" "○"))
  :config ())  ; Show message if verbose is activated
#+end_src

** Visual Fill Column
Fill-column for visual-line-mode.
https://github.com/joostkremers/visual-fill-column

#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook (visual-line-mode . visual-fill-column-mode)
  ; Disable
  ((mhtml-mode) . (lambda () (visual-fill-column-mode 0)))
  :custom
  (visual-fill-column-width 128)
  (visual-fill-column-center-text t)
  :config ())  ; Show message if verbose is activated
#+end_src

** COMMENT Lorem Ipsum
Add filler lorem ipsum text to Emacs
https://github.com/jschaf/emacs-lorem-ipsum

#+begin_src emacs-lisp
(use-package lorem-ipsum
  :custom
  (Lorem-ipsum-paragraph-separator “\n\n”)
  (Lorem-ipsum-sentence-separator “ “)
  (Lorem-ipsum-list-beginning “”)
  (Lorem-ipsum-list-bullet “* “)
  (Lorem-ipsum-list-item-end “\n”)
  (Lorem-ipsum-list-end “”)
  :general
  (leader-def
    "l i" '(:ignore t :which-key "Lorem Ipsum")
    "l i s" '(lorem-ipsum-insert-sentences :which-key "Sentence")
    "l i p" '(lorem-ipsum-insert-paragraphs :which-key "Paragraph")
    "l i l" '(lorem-ipsum-insert-list :which-key "List"))
  :config ())  ; Show message if verbose is activated
#+end_src

* Data
Support for editing binary data files.

** Save Place
Automatically save place in files.

#+begin_src emacs-lisp
(use-package saveplace
  :straight (:type built-in)
  :demand
  :config
  (save-place-mode 1))
#+end_src

* External
Interfacing to external utilities.

** Processes
Process, subshell, compilation, and job control support.

*** Eshell
The Emacs command shell

#+begin_src emacs-lisp
(use-package eshell :straight (:type built-in)
  ;; :gfhook ('eshell-pre-command-hook #'eshell-save-some-history)
  :custom
  (eshell-history-size 6000)
  (eshell-buffer-maximum-lines 6000)
  (eshell-hist-ignoredups t)
  (eshell-scroll-to-bottom-on-input t)
  :config
  ; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
  :general
  (leader-def
	"e s" '(eshell :which-key "Eshell")))

;;Running programs in a term-mode buffer
;(with-eval-after-load 'esh-opt
;  (setq eshell-destroy-buffer-when-process-dies t)
;  (setq eshell-visual-commands '("htop" "zsh" "vim")))
#+end_src

**** Eshell Git Prompt
Themes for emacs shell (eshell) prompt.
https://github.com/xuchunyang/eshell-git-prompt

#+begin_src emacs-lisp
(use-package eshell-git-prompt
  :after eshell
  :demand
  :config
  (eshell-git-prompt-use-theme 'powerline))
#+end_src

*** COMMENT Shell
Running shell from within Emacs buffers.

#+begin_src emacs-lisp
(use-package shell :straight (:type built-in)
  :custom
  (comint-output-filter-functions
   (remove 'ansi-color-process-output comint-output-filter-functions))

  ; In Windows if you like PowerShell you can use this config:
  ; https://docs.microsoft.com/en-us/archive/blogs/dotnetinterop/run-powershell-as-a-shell-within-emacs
  (explicit-shell-file-name "powershell.exe")
  (explicit-powershell.exe-args '())

  :config
  (add-hook 'shell-mode-hook
	    (lambda ()
	      ;; Disable font-locking in this buffer to improve performance
	      (font-lock-mode -1)
	      ;; Prevent font-locking from being re-enabled in this buffer
	      (make-local-variable 'font-lock-function)
	      (setq font-lock-function (lambda (_) nil))
	      (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t))))

; Better colors: https://github.com/atomontage/xterm-color
#+end_src

*** COMMENT Term
General command interpreter in a window.
NOTE: term-mode doesn’t work on Windows: “Spawning child process: invalid argument”

#+begin_src emacs-lisp
(use-package term :straight (:type built-in)
  :custom
  (term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (explicit-shell-file-name "zsh")
  (explicit-zsh-args '())
  :config ())  ; Show message if verbose is activated
#+end_src

**** Eterm 256Color
Uses xterm-color to add customizable 256 color support to term and ansi-term.
https://github.com/dieggsy/eterm-256color

#+begin_src emacs-lisp
(use-package eterm-256color
  :after term
  :ghook 'term-mode-hook
  :config ())  ; Show message if verbose is activated
#+end_src

*** COMMENT Vterm
ansi-term

#+begin_src emacs-lisp
(use-package vterm :straight (:type built-in)
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))
#+end_src

** Server
Emacs running as a server process.

#+begin_src emacs-lisp
  ;(server-start)  ; Allow this Emacs process to be a server for client processes
  ;(setq show-value-server-raise-frame t)  ; If non-nil, raise frame when switching to a buffer
  ;(setq server-window (pop-to-buffer (current-buffer) t)) ; Specification of the window to use for selecting Emacs server buffers
#+end_src

** Magit
A Git porcelain inside Emacs.
https://github.com/magit/magit

#+begin_src emacs-lisp
(use-package magit
  ;; :custom
  ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  :config
  (with-eval-after-load 'magit-mode (add-hook 'after-save-hook 'magit-after-save-refresh-status t))
  ;; Remove some functions
  ;; (with-eval-after-load 'magit-diff
  ;; 	(remove-hook 'magit-section-movement-hook
  ;; 				 'magit-hunk-set-window-start))
  :general
  (leader-def
    "g"     '(:ignore t :which-key "magit")
    "g s"   'magit-status
    "g d"   'magit-diff-unstaged
    "g c"   'magit-branch-or-checkout
    "g l"   '(:ignore t :which-key "log")
    "g l c" 'magit-log-current
    "g l f" 'magit-log-buffer-file
    "g b"   'magit-branch
    "g P"   'magit-push-current
    "g p"   'magit-pull-branch
    "g f"   'magit-fetch
    "g F"   'magit-fetch-all
    "g r"   'magit-rebase))
#+end_src

** COMMENT EFS
A free/libre and open-source extensible framework that revolutionizes the graphical capabilities of Emacs.
https://github.com/emacs-eaf/emacs-application-framework

#+begin_src emacs-lisp
;; (use-package eaf
;;   ;; :straight (:type built-in)
;;   :straight nil
;;   :load-path "~/.config/emacs/site-lisp/emacs-application-framework"
;;   :demand
;;   :custom
;;   ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
;;   (eaf-browser-continue-where-left-off t)
;;   (eaf-browser-enable-adblocker t)
;;   (browse-url-browser-function 'eaf-open-browser)
;;   :config
;;   (defalias 'browse-web #'eaf-open-browser)
;;   (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
;;   (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
;;   (eaf-bind-key take_photo "p" eaf-camera-keybinding)
;;   (eaf-bind-key nil "M-q" eaf-browser-keybinding) ;; unbind, see more in the Wiki
;; )

;; (require 'eaf-browser)
;; (require 'eaf-pdf-viewer)
;; (require 'eaf-demo)
;; (require 'eaf-rss-reader)

(use-package eaf
:straight '(eaf :type git
                :host github
		:repo "emacs-eaf/emacs-application-framework"
		:files ("*"))
)
#+end_src

*** COMMENT Demo

#+begin_src emacs-lisp
(use-package eaf-rss-reader
  :straight (:type built-in)
  :after eaf
  :demand
)
#+end_src

*** COMMENT RSS Reader

#+begin_src emacs-lisp
(use-package eaf-rss-reader
  :straight (:type built-in)
  :after eaf
  :demand
)
#+end_src

* Communication
Communications, networking, and remote access to files.

** COMMENT Elfeed
An Emacs Atom/RSS feed reader.
https://github.com/skeeto/elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :custom
  (elfeed-search-filter "@3-days-ago")
  :general
  (leader-def
	"e f" #'elfeed)
  :config ())  ; Show message if verbose is activated
#+end_src

*** COMMENT Elfeed Org
Configure the Elfeed RSS reader with an Orgmode file
https://github.com/remyhonig/elfeed-org

#+begin_src emacs-lisp
(use-package elfeed-org
  ;; :after elfeed
  :demand
  :custom
  (rmh-elfeed-org-files (list "/mnt/files/Ricardo/Documents/note/rss.org"))
  :config ())  ; Show message if verbose is activated
#+end_src

** COMMENT ERC

#+begin_src emacs-lisp
(use-package erc :straight (:type built-in)
  :commands (erc erc-tls)
  :config
  (setq erc-server "irc.libera.chat"
		erc-nick "raisak"
		;; erc-user-full-name "Ricardo Gomez"
		erc-track-shorten-start 8
		erc-autojoin-channels-alist '(("irc.libera.chat" "#emacs" "#systemcrafters"))
		erc-kill-buffer-on-part t
        erc-auto-query 'bury)
  :general
  (leader-def
	"e r" '(erc-tls :which-key "ERC")))
#+end_src

* Programming
Support for programming in other languages.

** Languages
Modes for editing programming languages.

*** COMMENT Html

#+begin_src emacs-lisp
(use-package mhtml :straight (:type built-in)

)
#+end_src    

*** COMMENT Css
Cascading Style Sheets (CSS) editing mode.

#+begin_src emacs-lisp
(use-package css :straight (:type built-in))
#+end_src

**** LessCss
Less CSS mode.

#+begin_src emacs-lisp
(use-package less-css-mode :straight (:type built-in)
  :config ())  ; Show message if verbose is activated
#+end_src

*** COMMENT JavaScript
Major mode for editing JavaScript

#+begin_src emacs-lisp
(use-package js :straight (:type built-in)
  :config (message "Entraste en Javascript"))  ; Show message if verbose is activated
#+end_src

*** COMMENT C
Support for the C language and related languages.

**** Cpp
Highlight or hide text according to cpp conditionals.

#+begin_src emacs-lisp
(use-package cpp :straight (:type built-in)
  ;; :ghook 'c++-mode-hook
  :config
  (message "hello there!"))
;compile c++ whit f9
;(defun code-compile ()
;  (interactive)
;  (unless (file-exists-p "Makefile")
;    (set (make-local-variable 'compile-command)
;     (let ((file (file-name-nondirectory buffer-file-name)))
;       (format "%s -o %s %s"
;           (if  (equal (file-name-extension file) "cpp") "g++" "gcc" )
;           (file-name-sans-extension file)
;           file)))
;    (compile compile-command)))
;
;(global-set-key [f9] 'code-compile)

;; clang-format can be triggered using C-c C-f
;; Create clang-format file using google style
;; clang-format -style=google -dump-config > .clang-format
;; (require 'clang-format)
;; (global-set-key (kbd "C-c C-f") 'clang-format-region)

;; (require 'modern-cpp-font-lock)
;; (modern-c++-font-lock-global-mode t)
#+end_src

*** GDScript
Major mode for Godot's GDScript language
https://github.com/godotengine/emacs-gdscript-mode

#+begin_src emacs-lisp
(use-package gdscript-mode
  :preface
  (defun +/lsp--gdscript-ignore-errors (original-function &rest args)
	"Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
	(if (string-equal major-mode "gdscript-mode")
		(let ((json-data (nth 0 args)))
		  (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
				   (not (gethash "id" json-data nil))
				   (not (gethash "method" json-data nil)))
			  nil ; (message "Method not found")
			(apply original-function args)))
	  (apply original-function args)))
  :custom
  (gdscript-use-tab-indents t)
  (gdscript-indent-offset 4)
  (gdscript-godot-executable "/bin/godot")
  (gdscript-gdformat-save-and-format t)
  :config
  ;; Runs the function `+/lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
  (advice-add #'lsp--get-message-type :around #'+/lsp--gdscript-ignore-errors))
#+end_src

*** Prog 
Generic programming mode, from which others derive.

#+begin_src emacs-lisp
(use-package prog-mode :straight (:type built-in)
  :demand
  :custom
  (prettify-symbols-unprettify-at-point 'right-edge)
  (prettify-symbols-alist '())
  :config
  (global-prettify-symbols-mode 1)

  (setq prettify-symbols-alist '(("TODO" . "")
	                         ("WAIT" . "")        
   				 ("NOPE" . "")
				 ("DONE" . "")
				 ("[#A]" . "")
				 ("[#B]" . "")
 				 ("[#C]" . "")
				 ("[ ]" . "")
				 ("[X]" . "")
				 ("[-]" . "")
				 ("#+BEGIN_SRC" . "")
				 ("#+END_SRC" . "―")
				 (":PROPERTIES:" . "")
				 (":END:" . "―")
				 ("#+STARTUP:" . "")
				 ("#+TITLE: " . "")
				 ("#+RESULTS:" . "")
				 ("#+NAME:" . "")
				 ("#+ROAM_TAGS:" . "")
				 ("#+FILETAGS:" . "")
				 ("#+HTML_HEAD:" . "")
				 ("#+SUBTITLE:" . "")
				 ("#+AUTHOR:" . "")
				 (":Effort:" . "")
				 ("SCHEDULED:" . "")
				 ("DEADLINE:" . "")
				 ("lambda" . 955)
				 ))
)
#+end_src

*** COMMENT Python
Python Language’s flying circus support for Emacs

#+begin_src emacs-lisp
;; (use-package python
  ;; :straight (:type built-in)
  ;; :custom
  ;; (python-shell-interpreter "python")
  ;; (dap-python-executable "python3")
  ;; (dap-python-debugger 'debugpy)
  ;; :config ())  ; Show message if verbose is activated
#+end_src

*** COMMENT Sh Script
Shell script editing commands for Emacs.

#+begin_src emacs-lisp
(defun +sh--match-variables-in-quotes (limit)
  "Search for variables in double-quoted strings bounded by LIMIT."
  (with-syntax-table sh-mode-syntax-table
    (let (res)
      (while
          (and (setq res
                     (re-search-forward
                      "[^\\]\\(\\$\\)\\({.+?}\\|\\<[a-zA-Z0-9_]+\\|[@*#!]\\)"
                      limit t))
               (not (eq (nth 3 (syntax-ppss)) ?\"))))
      res)))

(defun +sh--match-command-subst-in-quotes (limit)
  "Search for variables in double-quoted strings bounded by LIMIT."
  (with-syntax-table sh-mode-syntax-table
    (let (res)
      (while
          (and (setq res
                     (re-search-forward "[^\\]\\(\\$(.+?)\\|`.+?`\\)"
                                        limit t))
               (not (eq (nth 3 (syntax-ppss)) ?\"))))
      res)))

(defvar +sh-builtin-keywords
  '("cat" "cd" "chmod" "chown" "cp" "curl" "date" "echo" "find" "git" "grep"
    "kill" "less" "ln" "ls" "make" "mkdir" "mv" "pgrep" "pkill" "pwd" "rm"
    "sleep" "sudo" "touch")
  "A list of common shell commands to be fontified especially in `sh-mode'.")

(use-package sh-script
  :straight (:type built-in)
  :mode ("\\.bats\\'" . sh-mode)
  :mode ("\\.\\(?:zunit\\|env\\)\\'" . sh-mode)
  :mode ("/bspwmrc\\'" . sh-mode)
  ;; :custom
  ;; (sh-indent-after-continuation 'always)
  :config
  ; Recognize function names with dashes in them
  (add-to-list 'sh-imenu-generic-expression
			   '(sh (nil "^\\s-*function\\s-+\\([[:alpha:]_-][[:alnum:]_-]*\\)\\s-*\\(?:()\\)?" 1)
					(nil "^\\s-*\\([[:alpha:]_-][[:alnum:]_-]*\\)\\s-*()" 1)))

  ;; 1. Fontifies variables in double quotes
  ;; 2. Fontify command substitution in double quotes
  ;; 3. Fontify built-in/common commands (see `+sh-builtin-keywords')
  (+/add-hook 'sh-mode-hook
	(defun +sh-init-extra-fontification-h ()
	  (font-lock-add-keywords
	   nil `((+sh--match-variables-in-quotes
			  (1 'font-lock-constant-face prepend)
			  (2 'font-lock-variable-name-face prepend))
			 (+sh--match-command-subst-in-quotes
			  (1 'sh-quoted-exec prepend))
			 (,(regexp-opt +sh-builtin-keywords 'symbols)
			  (0 'font-lock-type-face append)))))))
#+end_src

**** Company Shell

#+begin_src emacs-lisp :tangle no
  (use-package! company-shell
  :when (featurep! :completion company)
  :unless (featurep! +lsp)
  :after sh-script
  :config
  (set-company-backend! 'sh-mode '(company-shell company-files))
  (setq company-shell-delete-duplicates t))
 #+end_src

**** PowerShell

#+begin_src emacs-lisp :tangle no
(use-package! powershell
  :when (featurep! +powershell)
  :defer t
  :config
  (when (featurep! +lsp)
    (add-hook 'powershell-mode-local-vars-hook #'lsp!)))
#+end_src

*** C#
Mode for editing C# in emacs.
https://github.com/emacs-csharp/csharp-mode

#+begin_src emacs-lisp
(use-package csharp-mode)
#+end_src
   
*** Yaml

#+begin_src elisp
(use-package yaml-mode
  ;; :general
  ;; ('yaml-mode-map "\C-m" 'newline-and-indent)
)
#+end_src

*** Web
Mode for editing web templates aka HTML files embedding parts and blocks.
https://github.com/fxbois/web-mode

#+begin_src emacs-lisp
(use-package web-mode)
#+end_src

*** Vimrc

#+begin_src emacs-lisp
(use-package vimrc-mode)
;; (add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+end_src


** Tools
*** LSP
Client for Language Server Protocol \\
https://github.com/emacs-lsp/lsp-mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :preface
  (defun +/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))) ;; Configure orderless
          ;; '(flex) ;; Configure flex (built-in)
  :hook
  ((
    mhtml-mode
    css-mode
    js-mode  ; ts-ls
    ;; c++-mode
    ;; sh-mode
    ;; python-mode
    gdscript-mode
  ) . lsp-deferred)
  (lsp-completion-mode . +/lsp-mode-setup-completion)
  (lsp-mode . lsp-enable-which-key-integration)  ; Which-key integration
  :custom
  (lsp-completion-provider :none) ; we use corfu!
  (lsp-keymap-prefix "C-c l")
;;   (lsp-modeline-diagnostics-scope :workspace)
;;   (lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
;;   (lsp-modeline-code-actions-segments '(count icon name))
  :config
  (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))
;;   (lsp-headerline-breadcrumb-mode 1)
;;   (lsp-modeline-code-actions-mode 1)
  ;; :general
  ;; (leader-def :keymaps 'lsp-mode-map
    ;; "l" '(:ignore t :which-key "lsp")
  ;; )
)
#+end_src

**** UI

#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :custom
  (lsp-ui-sideline-mode 1)
  ; Sideline
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-update-mode #'point)
  (lsp-ui-sideline-delay 0.6)
  ; Peek
  (lsp-ui-peek-enable t)
  (lsp-ui-peek-show-directory t)
  ; Doc
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-delay 6.0)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse t)
  ; Imenu
  (lsp-ui-imenu-window-width 16)
  (lsp-ui-imenu--custom-mode-line-format nil)
  (lsp-ui-imenu-auto-refresh nil)
  (lsp-ui-imenu-refresh-delay nil)
  ;; :general
  ;; (:keymaps 'lsp-ui-mode-map
  ;;   "l p" '(:ignore t :which-key "peek")
  ;;   "l p d" #'(lsp-ui-peek-find-definitions :wk "definition")
  ;;   "l p r" #'(lsp-ui-peek-find-references :wk "reference")
  ;;   "l p w" #'(lsp-ui-peek-find-workspace-symbol :wk "workspace symbol")
  ;;   "l p i" #'(lsp-ui-peek-find-implementation :wk "implementation")
  ;;   "l p b" #'(lsp-ui-peek-jump-backward :wk "jump backward")
  ;;   "l p f" #'(lsp-ui-peek-jump-forward :wk "jump forward")
  ;; )
)
#+end_src

*** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :demand
  :custom
  (projectile-discover-projects-in-search-path t)
  (projectile-project-search-path
   '("/mnt/files/Ricardo/Projects"))
  :config
  (projectile-register-project-type 'godot '("project.godot")
                                    :project-file "project.godot"
				    :compile "godot --help"
				    :test "godot --help"
				    :run "godot --help")
  :general
  (leader-def
    "p" '(projectile-command-map :which-key "project")
    "p" '(:ignore t :which-key "project")
    "p f" '(projectile-find-file :which-key "file")
    "p d" '(projectile-find-dir :which-key "directory")
    "p k" '(projectile-kill-buffers :which-key "kill buffers")
  )
)
#+end_src

*** COMMENT Project

#+begin_src emacs-lisp
(use-package project
  :demand
  :custom
  ;; (projectile-discover-projects-in-search-path t)
  ;; (projectile-project-search-path
   ;; '("/mnt/files/Ricardo/Projects"))
  :general
  (leader-def
    "p" '(:ignore t :which-key "project")
    "p f" '(project-find-file :which-key "file")
    "p d" '(project-find-dir :which-key "directory")
    "p k" '(project-kill-buffers :which-key "kill buffers")
))

(project-current)
#+end_src

* Applications
Applications written in Emacs.

** COMMENT Package
Manager for Emacs Lisp packages.

#+begin_src emacs-lisp :tangle no :noweb-ref package
(require 'package)

; An alist of archives from which to fetch
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
						 ("melpa-stable" . "https://stable.melpa.org/packages/")
						 ("org" . "https://orgmode.org/elpa/")
						 ("elpa" . "https://elpa.gnu.org/packages/")))

; An alist of packages that are pinned to specific archives
;(setq package-archives 'package-pinned-packages '(org . "org"))

; Make installed packages available when Emacs starts
(package-initialize)

; Ensure that Emacs has fetched the package list
(unless package-archive-contents (package-refresh-contents))
#+end_src

*** COMMENT Auto Package Update
Automatically update Emacs packages. (only for package.el)
https://github.com/rranelli/auto-package-update.el

#+begin_src emacs-lisp
(use-package auto-package-update
  :hook (after-init . auto-package-update-minor-mode)
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

** Straight
Next-generation, purely functional package manager for the Emacs hacker.
https://github.com/raxod502/straight.el

#+begin_src emacs-lisp :tangle no :noweb-ref straight
; Install straight if not installed
(defvar bootstrap-version)
(let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
	(with-current-buffer
		(url-retrieve-synchronously
		 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
		 'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Use Package
A use-package declaration for simplifying your ‘.emacs’.
https://github.com/jwiegley/use-package

#+begin_src emacs-lisp :tangle no :noweb-ref use-package
; Use package.el
;(unless (package-installed-p 'use-package)
;  (package-install 'use-package))
;(eval-when-compile
;  (require 'use-package))

; Use straight.el
(straight-use-package 'use-package)
(setq straight-enable-use-package-integration t)
(setq straight-use-package-by-default t)

(setq use-package-always-defer t  
	  use-package-always-pin t
	  use-package-always-ensure nil
	  use-package-verbose nil)
#+end_src

** COMMENT Dashboard
An extensible emacs startup screen showing you what’s most important
https://github.com/emacs-dashboard/emacs-dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :hook (after-init . dashboard-refresh-buffer)
  :custom
  (dashboard-banner-logo-title "Welcome to Emacs!")
  (dashboard-center-content t)
  (dashboard-set-file-icons t)
  (dashboard-set-heading-icons t)
  (dashboard-show-shortcuts t)
  (dashboard-startup-banner 'logo)
  ;; (dashboard-startup-banner (expand-file-name "banner.txt" user-emacs-directory))
  (dashboard-items '((recents  . 5)
					 (bookmarks . 5)
					 (projects . 5)
					 ;; (agenda . 5)  ; This load org package
					 (registers . 5)))
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
	   "GitHub" "rgomezgerardi"
	   (lambda (&rest _) (browse-url "https://github.com/rgomezgerardi")))
	  (,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
	   "LinkedIn" "rgomezgerardi"
	   (lambda (&rest _) (browse-url "https://linkedin.com"))))))
  (dashboard-set-init-info t)
  (dashboard-init-info (+/display-startup-time))
  (dashboard-set-footer t)
  (dashboard-footer-messages
   '("Dashboard is pretty cool!"
	 "The one true editor, Emacs!"
	 "Who the hell uses VIM anyway? Go Evil!"
	 "Free as free speech, free as free Beer"
	 "Happy coding!"
	 "Vi Vi Vi, the editor of the beast"
	 "Go make yourself some friends, or you'll be lonely"
	 "Welcome to the church of Emacs"
	 "While any text editor can save your files, only Emacs can save your soul"
	 "What the fuck are you doing?"))
  :config
  (if (daemonp)  ; Ensure emacsclient opens on *dashboard* rather than *scratch*
	  (setq initial-buffer-choice  
			(lambda () (get-buffer "*dashboard*")))))
#+end_src

** COMMENT Calendar
Calendar and time management support.

*** Holidays
Holidays support in calendar.

;; (setq holiday-other-holidays
;;       '((holiday-fixed 1 1 "Año nuevo")
;; 	(holiday-sexp '(calendar-nth-named-day 1 1 1 year 6) "Día de Reyes")
;; 	(holiday-sexp '(calendar-nth-named-day 1 1 3 year 19) "Día de San José")
;; 	(holiday-easter-etc -3 "Jueves Santo")
;; 	(holiday-easter-etc -2 "Viernes Santo")
;; 	(holiday-fixed 5 1 "Día del trabajo")
;; 	(holiday-easter-etc +43 "Día de la ascención")
;; 	(holiday-sexp '(calendar-nth-named-day 1 1 6 year 29)
;; 		      "San Pedro y San Pablo")
;; 	(holiday-easter-etc +64 "Corpus Christi")
;; 	(holiday-easter-etc +71 "Sagrado corazón")
;; 	(holiday-fixed 7 20 "Día de la independencia")
;; 	(holiday-fixed 8 7 "Batalla de Boyacá")
;; 	(holiday-sexp '(calendar-nth-named-day 1 1 8 year 15)
;; 		      "Asunción de la virgen")
;; 	(holiday-sexp '(calendar-nth-named-day 1 1 10 year 12) "Día de la raza")
;; 	(holiday-sexp '(calendar-nth-named-day 1 1 11 year 1)
;; 		      "Todos los santos")
;; 	(holiday-sexp '(calendar-nth-named-day 1 1 11 year 11)
;; 		      "Independencia de Cartagena")
;; 	(holiday-fixed 12 25 "Navidad")
;; 	(holiday-fixed 12 8 "Inmaculada concepción")))

** COMMENT Desktop

#+begin_src emacs-lisp
(use-package desktop :straight (:type built-in)
  :demand
  :config
  (desktop-save-mode 1)
  ;; (desktop-revert)

  (setq desktop-buffers-not-to-save
        (concat "\\("
                "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
                "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
	        "\\)$"))
  (add-to-list 'desktop-modes-not-to-save 'dired-mode)
  (add-to-list 'desktop-modes-not-to-save 'Info-mode)
  (add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
  (add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
)
#+end_src
   
** Emacs

#+begin_src emacs-lisp
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
  :general
  (leader-def
    "e r" #'((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "reload emacs config")
    "e k" #'(kill-emacs :wk "kill emacs")
  )
)
#+end_src

** Notification
*** Alert
A Growl-workalike for Emacs which uses a common notification interface and multiple, selectable "styles".
https://github.com/jwiegley/alert

#+begin_src emacs-lisp
(use-package alert
:demand
:custom
(alert-default-style 'libnotify)
(alert-fade-time 10)
;; :config
;; (alert-add-rule :status   '(buried visible idle)
                ;; :severity '(moderate high urgent)
                ;; :mode     'evil-smartparens-mode
                ;; :style 'ignore
                ;; :continue t)
)
#+end_src

*** Wild Notifier
A package which adds notification support for org-agenda views.
With this package you’ll get notifications for TODO entries.
https://github.com/akhramov/org-wild-notifier.el

#+begin_src emacs-lisp
(use-package org-wild-notifier
:after org-mode
:demand
:custom
(org-wild-notifier-alert-time '(1))
(org-wild-notifier-notification-title "Agenda")
(org-wild-notifier-notification-icon nil)
(org-wild-notifier-keyword-whitelist '("TODO"))
(org-wild-notifier-keyword-blacklist nil)
(org-wild-notifier-tags-whitelist nil)
(org-wild-notifier-tags-blacklist nil)
(org-wild-notifier-alert-times-property	"WILD_NOTIFIER_NOTIFY_BEFORE")
:config
(org-wild-notifier-mode 1))
#+end_src

*** COMMENT Org Alert

#+begin_src emacs-lisp
(use-package org-alert
  :demand
  :custom
  (org-alert-interval 300)
  (org-alert-notification-title "*org*")
  (org-alert-notify-cutoff 1)
  :config
  (org-alert-enable))
#+end_src

* Development
Support for further development of Emacs.

** Internal
Code for Emacs internals, build process, defaults.

*** Storage Allocation
Storage allocation and gc for GNU Emacs Lisp interpreter.

**** Garbage Collector Magic Hack (GCMH)
Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity
https://gitlab.com/koral/gcmh

#+begin_src emacs-lisp :tangle no :noweb-ref gcmh
(use-package gcmh
  :demand
  :custom
  (garbage-collection-messages nil)
  (gcmh-verbose nil)
  ;(gcmh-high-cons-threshold)
  ;(gc-cons-threshold (* 50 1000 1000))  ; The default is 800 kilobytes
  ;(gc-cons-threshold (* 2 1000 1000))  ; Make gc pauses faster by decreasing the threshold
  :config ())  ; Show message if verbose is activated
#+end_src

* Environment
Fitting Emacs with its environment.

** Display
How characters are displayed in buffers.

*** Line Numbers
Display line numbers in the buffer.

#+begin_src emacs-lisp
(use-package display-line-numbers :straight (:type built-in)
  :hook ((prog-mode conf-mode) . display-line-numbers-mode)
  :config ())  ; Show message if verbose is activated




; Disable line numbers for some modes
;; (defcustom display-line-numbers-exempt-modes
;;   '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
;;   "Major modes on which to disable line numbers."
;;   :group 'display-line-numbers
;;   :type 'list
;;   :version "green")

;; (defun display-line-numbers--turn-on ()
;;   "Turn on line numbers except for certain major modes.
;; Exempt major modes are defined in `display-line-numbers-exempt-modes'."
;;   (unless (or (minibufferp)
;;               (member major-mode display-line-numbers-exempt-modes))
;;     (display-line-numbers-mode)))

;; (global-display-line-numbers-mode)






;; (dolist (mode '(term-mode-hook
;; 		dashboard-mode-hook
;; 		org-mode-hook
;; 		treemacs-mode-hook
;; 		eshell-mode-hook))
;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Exec Path from Shell
Make Emacs use shell-defined such as $PATH etc.
https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp :tangle no :noweb-ref exec-path-from-shell
(use-package exec-path-from-shell
  :demand
  :custom
  (exec-path-from-shell-arguments '("-l"))
  :config
  ;  gnu/linux Linux |  windows-nt Windows | darwin macOS
  (when (memq system-type '(gnu/linux darwin))
	(exec-path-from-shell-initialize)))
#+end_src

** Frames
Support for Emacs frames and window systems.

#+begin_src emacs-lisp :tangle early-init.el
(menu-bar-mode 0)
(scroll-bar-mode 0)
(tool-bar-mode 0)
#+end_src

*** COMMENT Fringe
Window fringes.


#+begin_src emacs-lisp :tangle early-init.el
  ; Default appearance of fringes on all frames.
  (setq set-fringe-mode 10)        ; Give some breathing room
#+end_src
   
** Initialization
Emacs start-up procedure.

#+begin_src emacs-lisp :tangle early-init.el
(setq 
inhibit-startup-message t
inhibit-startup-echo-area-message t
inhibit-startup-screen t
user-emacs-directory-warning t
initial-buffer-choice (lambda () (get-buffer "*Messages*"))  ; Buffer to show after starting Emacs
)

; Disable startup echo area message
(fset 'display-startup-echo-area-message 'ignore)
#+end_src

** Menu
Input from the menus.

#+begin_src emacs-lisp
; Don't pop up UI dialogs when prompting
(setq use-dialog-box nil)
#+end_src

** Minibuffer
Controlling the behavior of the minibuffer.

*** Vertico
VERTical Interactive COmpletion.
https://github.com/minad/vertico

#+begin_src emacs-lisp
(use-package vertico
  :demand
  :preface
  (defun +/vertico-backward-updir ()
	"Delete char before or go up directory for file cagetory vertico buffers."
	(interactive)
	(let ((metadata (completion-metadata (minibuffer-contents)
   										 minibuffer-completion-table
   										 minibuffer-completion-predicate)))
	  (if (and (eq (char-before) ?/)
   			   (eq (completion-metadata-get metadata 'category) 'file))
   		  (let ((new-path (minibuffer-contents)))
   			(delete-region (minibuffer-prompt-end) (point-max))
   			(insert (abbreviate-file-name
   					 (file-name-directory
   					  (directory-file-name
   					   (expand-file-name new-path))))))
   		(call-interactively 'backward-delete-char))))
  :custom
  (vertico-count 16)
  (vertico-cycle t)  ; Optionally enable cycling for `vertico-next' and `vertico-previous'
  (vertico-resize nil)  ; Grow and shrink the Vertico minibuffer
  ;; (enable-recursive-minibuffers t)  ; Enable recursive minibuffers
  :config
  (vertico-mode 1)
  ;; (setq minibuffer-prompt-properties  ; Do not allow the cursor in the minibuffer prompt
  ;; 		'(read-only t cursor-intangible t face minibuffer-prompt))
  ;; (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  :general
  (vertico-map
   "M-j" #'vertico-next
   "M-S-j" #'vertico-next-group
   "M-k" #'vertico-previous
   "M-S-k" #'vertico-previous-group
   "M-RET" #'vertico-exit-input
   "<backspace>" #'+/vertico-backward-updir)
  (minibuffer-local-map
   "M-h" #'backward-kill-word))
#+end_src

*** Consult
Practical commands based on the Emacs completion function completing-read.
https://github.com/minad/consult

#+begin_src emacs-lisp
(use-package consult
  :config
  ; Optionally configure a function which returns the project root directory.
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-root-function #'projectile-project-root)
  :general
  (leader-def
    ":" 'consult-complex-command
    "@" 'consult-register
    "#" 'consult-register-load
    "'" 'consult-register-store
    
    "c h" 'consult-history
    "c m" 'consult-mode-command
    "c b" 'consult-bookmark
    "c k" 'consult-kmacro

    "SPC" '(consult-buffer :which-key "Switch to buffer")
    "b w" '(consult-buffer-other-window :which-key "Switch to buffer other window")
    "b f" '(consult-buffer-other-frame :which-key "Switch to buffer other frame")

    "g l" 'consult-goto-line
    "g e" 'consult-compile-error
    "g f" 'consult-flymake  ;; Alternative: consult-flycheck
    "g o" 'consult-outline
    "g m" 'consult-mark
    "g k" 'consult-global-mark
    "g i" 'consult-imenu
    "g I" 'consult-imenu-multi

    "f r" '(consult-recent-file :wk "recent-file")

    "s f" 'consult-find
    "s F" 'consult-locate
    "s g" 'consult-grep
    "s G" 'consult-git-grep
    "s r" 'consult-ripgrep
    "s l" 'consult-line
    "s L" 'consult-line-multi
    "s m" 'consult-multi-occur
    "s k" 'consult-keep-lines
    "s u" 'consult-focus-lines
	"s e" 'consult-isearch))
#+end_src

**** COMMENT Consult LSP
Let’s try to mimic a few features of helm-lsp and lsp-ivy in consult workflow.
https://github.com/gagbo/consult-lsp

#+begin_src emacs-lisp
(use-package consult-lsp
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))
#+end_src

*** Marginalia
Enrich existing commands with completion annotations.
https://github.com/minad/marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :demand
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :general
  (minibuffer-local-map
   "M-a" #'marginalia-cycle)
  :config
  (marginalia-mode 1))
#+end_src

*** Orderless
Completion method that matches space-separated regexps in any order.
https://github.com/oantolin/orderless

#+begin_src emacs-lisp
(use-package orderless
  :demand
  :custom
  (completion-styles '(orderless))
  ;; (orderless-component-separator "[ &]")
  ;; (orderless-component-separator "[ +]")
  ;; (completion-category-defaults nil)
  ;; (completion-category-overrides '((file (styles . (orderless partial-completion)))))
  :config
  ;; ...otherwise find-file gets different highlighting than other commands
  ;; (set-face-attribute 'completions-first-difference nil :inherit nil)

  ;; (setq orderless-style-dispatchers
  ;; 	'(lambda (pattern _index _total) 
  ;; 	   (cond
  ;; 	    Ensure $ works with Consult commands, which add disambiguation suffixes
  ;; 	    ((string-suffix-p "$" pattern)
  ;; 	     `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x100000-\x10FFFD]*$")))
  ;; 	    ;; Ignore single !
  ;; 	    ((string= "!" pattern) `(orderless-literal . ""))
  ;; 	    ;; Without literal
  ;; 	    ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
  ;; 	    ;; Initialism matching
  ;; 	    ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
  ;; 	    ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
  ;; 	    ;; Literal matching
  ;; 	    ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
  ;; 	    ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
  ;; 	    ;; Flex matching
  ;; 	    ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
  ;; 	    ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1))))))
)
#+end_src

*** Savehist
Save minibuffer history.

#+begin_src emacs-lisp
(use-package savehist
  :demand
  :config
  (setq history-length 16)
  (savehist-mode 1)
)
#+end_src

*** COMMENT Mini Frame
Place minibuffer at the top of the current frame on read-from-minibuffer.
https://github.com/muffinmad/emacs-mini-frame

#+begin_src emacs-lisp :tangle no
(use-package mini-frame
  :hook (after-init . mini-frame-mode)
  :custom
  (mini-frame-show-parameters
   '((top . 50)
     (width . 0.7)
     (left . 0.5)))
  (mini-frame-ignore-commands
   '(eval-expression
	 "edebug-eval-expression"
	 debugger-eval-expression
	 evil-ex
	 "consult"))
  :config ())  ; Show message if verbose is activated
#+end_src

*** COMMENT Ibuffer

"b i"   '(ibuffer :which-key "Ibuffer")
"b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")

** Mode Line
Contents of the mode line.

*** Doom Modeline
A fancy and fast mode-line inspired by minimalism design.
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :after doom-themes
  :demand
  :custom
  (column-number-mode t)
  (inhibit-compacting-font-caches t)
  (doom-modeline-height 16)  ; How tall the mode-line should be
  (doom-modeline-icon t)  ; Whether display icons in the mode-line
  (doom-modeline-indent-info nil)  ; Whether display the indentation information
  :config
  (doom-modeline-mode 1))
#+end_src
   
* Faces
Support for multiple fonts.

** COMMENT Basic Faces
The standard faces of Emacs.

#+begin_src emacs-lisp
(defun +/set-font-faces ()
  ;; (set-face-attribute 'default nil
		  ;; :font "Ubuntu"
		  ;; :weight 'normal
		  ;; :height 120)

  (set-face-attribute 'fixed-pitch nil
		  ;:family "Monospace"
		  :font "Ubuntu"
		  ;:weight 'light
		  :height 120))

  ;; (set-face-attribute 'variable-pitch nil
		  ;:family "Monospace"
		  ;; :font "Symbols Nerd Font"
		  ;:weight 'light
		  ;; :height 120
		  ;; ))

;; This is needed for the deamon (emacsclient)
(if (daemonp)
	  (add-hook 'after-make-frame-functions ; (Emacs < 27)
	  ;; (add-hook 'server-after-make-frame-hook)
		(lambda (frame)
		  (with-selected-frame frame
			(+/set-font-faces))))
	  (+/set-font-faces))
#+end_src

** Doom Themes
Options for doom-themes.
https://github.com/hlissner/emacs-doom-themes

#+begin_src emacs-lisp :tangle no :noweb-ref doom-themes
(use-package doom-themes
  :demand
  :custom
  ;; (doom-theme 'doom-one)  ; This is for highlight indent guide
  (doom-themes-enable-bold t)  ; If nil, bold will be disabled across all faces
  (doom-themes-enable-italic t)  ; If nil, italics will be disabled across all faces
  (doom-themes-padded-modeline nil)  ; Default value for padded-modeline setting for themes that support it
  (doom-themes-treemacs-theme "doom-atom")
  :config
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)  ; Enable flashing the mode-line on error
  (doom-themes-treemacs-config)  ; Install doom-themes' treemacs configuration
  (doom-themes-org-config))  ; Corrects (and improves) org-mode's native fontification

; Alist of default values for frame creation
;; (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
	;; (add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+end_src

** Solaired
If only certain buffers could be so grossly incandescent.
https://github.com/hlissner/emacs-solaire-mode

#+begin_src emacs-lisp
(use-package solaire-mode
  :demand
  ;; :hook
  ;; ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
  ;; (minibuffer-setup . solaire-mode-fix-minibuffer)
;;   ((messages-buffer-mode dashboard-mode lisp-interaction-mode) . (lambda () (solaire-mode 0)))
  :config
  (solaire-global-mode 1)
  ;; (add-hook 'after-make-frame-functions
  ;;           (lambda (_frame)
  ;;             (load-theme 'doom-one t)
  ;;             (solaire-mode-swap-bg)))
)
#+end_src

** COMMENT All the Icons
A library for inserting Developer icons
https://github.com/domtronn/all-the-icons.el

#+begin_src emacs-lisp
(use-package all-the-icons
  :demand
  :if (display-graphic-p)
  :config ())  ; Show message if verbose is activated
#+end_src
   
** Highlight Indent Guides
Minor mode to highlight indentation
https://github.com/DarthFennec/highlight-indent-guides

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook ((prog-mode conf-mode org-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-suppress-auto-error t)
  (highlight-indent-guides-character 9474)  ; | 124  ⇥ 8677  ⇨ 8680  ↦ 8614 default 9474
  (highlight-indent-guides-method 'character)  ; Method to use when displaying indent guides
  (highlight-indent-guides-responsive 'stack)
  (highlight-indent-guides-auto-enabled t)
  )

  ;; :config
  ;; (when doom-theme
    ;; (+/indent-guides-init-faces-h))

  ;; ;; `highlight-indent-guides' breaks when `org-indent-mode' is active
  ;; (+/add-hook 'org-mode-local-vars-hook
  ;;   (defun +indent-guides-disable-maybe-h ()
  ;;     (and highlight-indent-guides-mode
  ;;          (bound-and-true-p org-indent-mode)
  ;;          (highlight-indent-guides-mode -1))))
#+end_src

** COMMENT Ligature
Typographic Ligatures in Emacs.
https://github.com/mickeynp/ligature.el

#+begin_src emacs-lisp
(use-package ligature
  :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
  :ghook ('after-init-hook #'global-ligature-mode)
  :custom
  (ligature-ignored-major-modes '(minibuffer-inactive-mode dashboard-mode))
  (ligature-mode-set-explicitly t)
  :config
  (ligature-set-ligatures 't '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "\\\\"
                               ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                               "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                               "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                               "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                               "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                               "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                               "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                               ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                               "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                               "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "?:" "://"
                               "?=" "?." "??" ";;" "/*" "/=" "/>" "__" "~~" "(*" "*)" "||>"
							   ;; "++" "//"  ; Trouble maker
							   )))
#+end_src
 
** COMMENT Unicode Fonts
Configure Unicode fonts
http://github.com/rolandwalker/unicode-fonts

#+begin_src emacs-lisp
(setq byte-compile-warnings '(cl-functions))  ; Disable "Package cl is deprecated" message

(use-package unicode-fonts
  :demand
  :config
  (unicode-fonts-setup))
#+end_src

* Help
Support for Emacs help systems.

** Helpful
A better *help* buffer
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
(use-package helpful
  :general
  (leader-def
    "h" '(:ignore t :which-key "help")
    "h f" #'(helpful-callable :wk "callable")
    "h F" #'(helpful-function :wk "function")
    "h o" #'(helpful-symbol :wk "symbol")
    "h v" #'(helpful-variable :wk "variable")
    "h c" #'(helpful-command :wk "command")
    "h k" #'(helpful-key :wk "key")
    "h i" #'(info :wk "info")
    "h r" #'(info-emacs-manual :wk "emacs manual")
    "h a" #'(consult-apropos :wk "apropos")
    "h s" #'(describe-syntax :wk "syntax")
    "h O" #'((lambda () (interactive) (info "org")) :wk "org manual")
    "h R" #'((lambda () (interactive) (info "elisp")) :wk "elisp manual"))
  :config ())  ; Show message if verbose is activated
#+end_src

** Which Key 
Display available keybindings in popup
https://github.com/justbur/emacs-which-key

#+begin_src emacs-lisp
;; ‘window-setup-hook’ or ‘tty-setup-hook’
(use-package which-key
  :demand
  :custom
  (which-key-idle-delay 0.4)
  :config
  (which-key-mode))
#+end_src

** Customize
Customization of the Customization support.

#+begin_src emacs-lisp
(use-package customize :straight (:type built-in)
  :custom
  (custom-file (locate-user-emacs-file "custom-vars.el"))
  :config
  (load custom-file 'noerror 'nomessage))
#+end_src

* Multimedia
Non-textual support, specifically images and sound.

** Emms

* Local
Code local to your site.

** Library

#+begin_src emacs-lisp :tangle no :noweb-ref library
(defun +/display-startup-time ()
  "Show the duration of emacs startup"
  (let ((package-count 0) (time (emacs-init-time)))
    (when (bound-and-true-p package-alist)
  (setq package-count (length package-activated-list)))
    (when (boundp 'straight--profile-cache)
  (setq package-count (+ (hash-table-size straight--profile-cache) package-count)))
    (if (zerop package-count)
	(message "Emacs started in %.4s with %d garbage collections"
		 time gcs-done)
  (message "%d packages loaded in %.4s with %d garbage collections"
	   package-count time gcs-done))))


(defun +/unquote (exp)
  "Return EXP unquoted."
  (declare (pure t) (side-effect-free t))
  (while (memq (car-safe exp) '(quote function))
    (setq exp (cadr exp)))
  exp)


(defun +/enlist (exp)
  "Return EXP wrapped in a list, or as-is if already a list."
  (declare (pure t) (side-effect-free t))
  (if (listp exp) exp (list exp)))


(defun +/resolve-hook-forms (hooks)
  "Converts a list of modes into a list of hook symbols.

If a mode is quoted, it is left as is. If the entire HOOKS list is quoted, the
list is returned as-is."
  (declare (pure t) (side-effect-free t))
  (let ((hook-list (+/enlist (+/unquote hooks))))
    (if (eq (car-safe hooks) 'quote)
	hook-list
  (cl-loop for hook in hook-list
	   if (eq (car-safe hook) 'quote)
	   collect (cadr hook)
	   else collect (intern (format "%s-hook" (symbol-name hook)))))))


(defmacro +/add-hook (hooks &rest rest)
  "A convenience macro for adding N functions to M hooks.

This macro accepts, in order:

  1. The mode(s) or hook(s) to add to. This is either an unquoted mode, an
     unquoted list of modes, a quoted hook variable or a quoted list of hook
     variables.
  2. Optional properties :local, :append, and/or :depth [N], which will make the
     hook buffer-local or append to the list of hooks (respectively),
  3. The function(s) to be added: this can be one function, a quoted list
     thereof, a list of `defun's, or body forms (implicitly wrapped in a
     lambda).

\(fn HOOKS [:append :local] FUNCTIONS)"
  (declare (indent (lambda (indent-point state)
		     (goto-char indent-point)
		     (when (looking-at-p "\\s-*(")
		   (lisp-indent-defform state indent-point))))
	   (debug t))
  (let* ((hook-forms (+/resolve-hook-forms hooks))
	 (func-forms ())
	 (defn-forms ())
	 append-p
	 local-p
	 remove-p
	 depth
	 forms)
    (while (keywordp (car rest))
  (pcase (pop rest)
	(:append (setq append-p t))
	(:depth  (setq depth (pop rest)))
	(:local  (setq local-p t))
	(:remove (setq remove-p t))))
    (let ((first (car-safe (car rest))))
  (cond ((null first)
	     (setq func-forms rest))

	    ((eq first 'defun)
	     (setq func-forms (mapcar #'cadr rest)
		   defn-forms rest))

	    ((memq first '(quote function))
	     (setq func-forms
		   (if (cdr rest)
		   (mapcar #'+/unquote rest)
		     (+/enlist (+/unquote (car rest))))))

	    ((setq func-forms (list `(lambda (&rest _) ,@rest)))))
  (dolist (hook hook-forms)
	(dolist (func func-forms)
	  (push (if remove-p
		    `(remove-hook ',hook #',func ,local-p)
		  `(add-hook ',hook #',func ,(or depth append-p) ,local-p))
		forms)))
  (macroexp-progn
   (append defn-forms
	   (if append-p
		   (nreverse forms)
		 forms))))))
#+end_src




*
evil-surround


