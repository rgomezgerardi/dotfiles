#+TITLE: Emacs Custom Configuration 
#+CREATOR: Ricardo Gomez 
#+AUTHOR: Ricardo Gomez
#+EMAIL: rgomezgerardi@gmail.com
#+PROPERTY: header-args :tangle init.el :noweb strip-export :cache yes

* Order
Order of blocks that must be tangle before the rest.

#+begin_src emacs-lisp
  <<library>>

  <<straight>>

  <<use-package>>

  <<gcmh>>

  <<doom-themes>>

  <<doom-modeline>>

  <<exec-path-from-shell>>

  <<no-littering>>

  <<general>>
#+end_src

* Editing
Basic text editing facilities.

** Editing Basics
Most basic editing facilities.

#+begin_src emacs-lisp
  (setq-default tab-width 4)  ; Distance between tab stops, in columns
#+end_src

** Electricity
Electric behavior for self inserting keys.

#+begin_src emacs-lisp
  (use-package electric
    :demand
    :custom
    (electric-indent-inhibit t)  ; Auto close bracket insertion
    (electric-pair-pairs '((?\" . ?\") (?\{ . ?\})))
    (electric-indent-chars '(?\n ?\^?))
    :config
    (electric-indent-mode 0)  ; Toggle on-the-fly reindentation 
    (electric-layout-mode 0)  ; Automatically insert newlines around some chars
    (electric-pair-mode 0))  ; Toggle automatic parens pairing
#+end_src

** Emulations
Emulations of other editors.

*** Evil
Extensible Vi layer for Emacs.
https://github.com/emacs-evil/evil

#+begin_src emacs-lisp
(use-package evil
  :demand
  :custom
  (evil-respect-visual-line-mode t)
  (evil-shift-width 4)
  (evil-split-window-below t)
  (evil-undo-system 'undo-tree)
  (evil-vsplit-window-right t)
  (evil-want-C-i-jump nil)
  (evil-want-C-u-scroll nil)
  (evil-want-integration t)
  (evil-want-keybinding nil)
  (evil-auto-indent nil)
  (evil-echo-state nil)
  :config
  (evil-mode 1)
  ;; (evil-set-initial-state 'messages-buffer-mode 'normal)
  :general
  ('motion
   "j" #'evil-next-visual-line
   "k" #'evil-previous-visual-line)
  ('insert
   "C-g" #'evil-normal-state
   "TAB" #'tab-to-tab-stop))
;; "C-h" #'evil-delete-backward-char-and-join))
#+end_src

**** Evil Collection
A set of keybindings for Evil mode
https://github.com/emacs-evil/evil-collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :demand
    :after evil
    :custom
    ;; (setq evil-collection-company-use-tng nil)  ; Is this a bug in evil-collection ?
    (evil-collection-outline-bind-tab-p nil)
    :config
    (evil-collection-init))
#+end_src

**** Evil Nerd Comment
Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
https://github.com/redguardtoo/evil-nerd-commenter

#+begin_src emacs-lisp
;; (defun counsel-imenu-comments ()
;; 	(interactive)
;; 	(let* ((imenu-create-index-function 'evilnc-imenu-create-index-function))
;; 	  (unless (featurep 'counsel) (require 'counsel))
;; 	  (counsel-imenu)))

(use-package evil-nerd-commenter
  :after evil
  :general
  ("C-;" 'evilnc-comment-or-uncomment-lines))
#+end_src

**** Evil Smartparens
Evil smartparens is a minor mode which makes evil play nice with smartparens.
https://github.com/expez/evil-smartparens

#+begin_src emacs-lisp :tangle no
(use-package evil-smartparens
  :after (evil smartparens)
  :hook (smartparens-enabled . evil-smartparens-mode)
  :config
  (defun who-called-me? (old-fun format &rest args)
  (let ((trace nil) (n 1) (frame nil))
    (while (setf frame (backtrace-frame n))
        (setf n     (1+ n) 
              trace (cons (cadr frame) trace)) )
      (apply old-fun (concat "<<%S>>\n" format) (cons trace args))))

  
  (defun suppress-messages (old-fun &rest args)
	(cl-flet ((silence (&rest args1) (ignore)))
      (advice-add 'message :around #'silence)
      (unwind-protect
          (apply old-fun args)
		(advice-remove 'message #'silence))))

  ;; (advice-add 'message :around #'who-called-me?)
  (advice-add 'evil-sp-delete :around #'suppress-messages))

  ;; :config ())  ; Show message if verbose is activated
#+end_src

*** Vi Tilde Fringe
Displays tildes in the fringe on empty lines a la Vi.
https://github.com/syl20bnr/vi-tilde-fringe

#+begin_src emacs-lisp
(use-package vi-tilde-fringe
  :ghook '(conf-mode-hook prog-mode-hook text-mode-hook)
  :gfhook ('(org-mode-hook
			 dashboard-mode-hook) #'(lambda () (vi-tilde-fringe-mode 0)))  ; Disable for some modes
  :config ())  ; Show message if verbose is activated
#+end_src

** Fill
Indenting and filling text.

** Indent
Indentation commands.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode t)
#+end_src

** Killing
Killing and yanking commands.

#+begin_src emacs-lisp
  (setq backward-delete-char-untabify-method 'hungry)
#+end_src

** Matching
Various sorts of searching and matching.

*** Counsel
Various completion functions using Ivy
https://github.com/abo-abo/swiper

#+begin_src emacs-lisp :tangle no
(use-package counsel
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  (ivy-initial-inputs-alist nil) ; Don't start searches with ^
  :config
  (with-eval-after-load 'helpful
	(counsel-describe-function-function #'helpful-callable)
	(counsel-describe-variable-function #'helpful-variable))
  :general
  ("M-x" #'counsel-M-x)
  ("M-/" #'counsel-outline)
  (minibuffer-local-map
	"C-r" 'counsel-minibuffer-history)
  (:states 'normal :keymaps 'eshell-mode-map
		   "C-r" #'counsel-esh-history)
  (my-leader-def
	"SPC"   '(counsel-M-x :which-key "M-x")
	"."     '(counsel-find-file :which-key "find file")
	"s h"   '(counsel-esh-history :which-key "Eshell history")
	"r"   '(counsel-recentf :which-key "Recent files")))
#+end_src

** Mouse
Input from the mouse.

#+begin_src emacs-lisp
  ; Zoom In/Out
  (general-def
    "<C-wheel-up>" 'text-scale-increase
    "<C-wheel-down>" 'text-scale-decrease)
#+end_src

** Smartparens
A minor mode for dealing with pairs in Emacs.
https://github.com/Fuco1/smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :hook ((prog-mode
		  text-mode
		  conf-mode) . (lambda ()
						 (smartparens-mode 1)
						 (show-smartparens-mode 1)))
  :config ())  ; Show message if verbose is activated
  ;; :config
  ;; (add-hook 'minibuffer-setup-hook 'turn-on-smartparens-strict-mode))
  ;; (smartparens-global-strict-mode 1))
;;sp-ignore-mode-list
#+end_src

** Undo
Undoing changes in buffers.

*** Undo Tree
Treat undo history as a tree
https://gitlab.com/tsc25/undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :hook (after-init . global-undo-tree-mode)
    :config ())  ; Show message if verbose is activated
#+end_src

** YASnippet
A template system for Emacs.
https://github.com/joaotavora/yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :ghook ('(conf-mode-hook prog-mode-hook text-mode-hook) #'yas-minor-mode)
  :config ())  ; Show message if verbose is activated
#+end_src

*** Doom Snippets
Doom Emacs' Snippet Library
https://github.com/hlissner/doom-snippets

#+begin_src emacs-lisp
(use-package doom-snippets
  :after yasnippet
  :straight (doom-snippets :type git :host github :repo "hlissner/doom-snippets" :files ("*.el" "*")))
#+end_src

*** YASnippet Snippets
Yasnippet official snippet collections
https://github.com/AndreaCrotti/yasnippet-snippets

#+begin_src emacs-lisp :tangle no
(use-package yasnippet-snippets)
#+end_src
   
* Convenience
Convenience features for faster editing.

** Abbreviations
Abbreviation handling, typing shortcuts, macros.

** All the Icons
A library for inserting Developer icons
https://github.com/domtronn/all-the-icons.el

#+begin_src emacs-lisp
  (use-package all-the-icons
	:demand
    :config ())  ; Show message if verbose is activated
#+end_src
   
** Centaur Tabs
Display a tab bar in the header line.
https://github.com/ema2159/centaur-tabs

#+begin_src emacs-lisp
(use-package centaur-tabs
  :preface
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

    Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
    All buffer name start with * will group to \"Emacs\".
    Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
	  ((or (string-equal "*" (substring (buffer-name) 0 1))
	   (memq major-mode '(magit-process-mode
			  magit-status-mode
			  magit-diff-mode
			  magit-log-mode
			  magit-file-mode
			  magit-blob-mode
			  magit-blame-mode
			  )))
   "Emacs")
  ((derived-mode-p 'prog-mode)
   "Prog")
  ((derived-mode-p 'dired-mode)
   "Dired")
  ((memq major-mode '(helpful-mode
					  help-mode))
   "Help")
  ((memq major-mode '(org-mode
			  org-agenda-clockreport-mode
			  org-src-mode
			  org-agenda-mode
			  org-beamer-mode
			  org-indent-mode
			  org-bullets-mode
			  org-cdlatex-mode
			  org-agenda-log-mode
			  diary-mode))
   "Org")
  (t
   (centaur-tabs-get-group-name (current-buffer))))))
  :hook (after-init . centaur-tabs-mode) 
  ; Disable centaur-tabs in selected buffers
  ((dired-mode 
    dashboard-mode 
    help-mode
    helpful-mode
	special-mode
    term-mode
    delayed-warning
	debugger-mode
    calendar-mode
	ibuffer-mode
	buffer-menu-mode
	messages-buffer-mode
    org-agenda-mode
    helpful-mode
    popup-buffer-mode) . centaur-tabs-local-mode)
  :custom
  (centaur-tabs-style "bar")
  (centaur-tabs-height 32)
  (centaur-tabs-set-icons t)
  (centaur-tabs-plain-icons nil)
  (centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-set-bar 'left)
  ;; (x-underline-at-descent-line t)  ; Set this only if centaur-tabs-set-bar is 'under
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-close-button "✕")
  (centaur-tabs-modified-marker "•")
  (centaur-tabs-cycle-scope 'tabs)
  :config
  (centaur-tabs-mode 1)
  (centaur-tabs-group-by-projectile-project)  ; Group by projectile project

  (defun centaur-tabs-hide-tab (x)
    "Do no to show buffer X in tabs."
    (let ((name (format "%s" x)))
  (or
   ;; Current window is not dedicated window.
   (window-dedicated-p (selected-window))

   ;; Buffer name not match below blacklist.
   (string-prefix-p "*epc" name)
   (string-prefix-p "*helm" name)
   (string-prefix-p "*Helm" name)
   (string-prefix-p "*Compile-Log*" name)
   (string-prefix-p "*lsp" name)
   (string-prefix-p "*company" name)
   (string-prefix-p "*Flycheck" name)
   (string-prefix-p "*tramp" name)
   (string-prefix-p " *Mini" name)
   (string-prefix-p "*help" name)
   (string-prefix-p "*straight" name)
   (string-prefix-p " *temp" name)
   (string-prefix-p "*Help" name)
   (string-prefix-p "*mybuf" name)

   ;; Is not magit buffer.
   (and (string-prefix-p "magit" name)
	    (not (file-name-extension name)))
   )))
  :general
  ;; (:states 'normal
   ;; "K" 'centaur-tabs-forward
   ;; "J" 'centaur-tabs-backward)
  (my-leader-def
    "t t" '(centaur-tabs--create-new-tab :which-key "New tab")
    "t l" '(centaur-tabs-forward-group :which-key "Go to next tab group")
    "t h" '(centaur-tabs-backward-group :which-key "Go to previous tab group")
    "t g g" '(centaur-tabs-select-beg-tab :which-key "Select the first tab of the group")
    "t G" '(centaur-tabs-select-end-tab :which-key "Select the last tab of the group")
    "t s" '(centaur-tabs-counsel-switch-group :which-key "Show buffer groups")
    "t p" '(centaur-tabs-group-by-projectile-project :which-key "Group by projectile project")
    "t g" '(centaur-tabs-group-buffer-groups :which-key "Use centaur's buffer grouping")
    ; Rebind join, and lookup (default K and J vim keybindigs)
    "k" '(evil-lookup :which-key "Look up the keyword at point")
    "j" '(evil-join :which-key "Join the selected lines")))
#+end_src

** Company
Extensible inline text completion framework.
https://github.com/company-mode/company-mode

#+begin_src emacs-lisp
(use-package company
  :preface
  (defun +/noweb-reference (command &optional arg &rest ignored)
	"Complete `<<' with the names of defined SRC blocks."
	(interactive (list 'interactive))
	(cl-case command
      (interactive (company-begin-backend '+/noweb-reference))
      (init (require 'org-element))
      (prefix (and (eq major-mode 'org-mode)
				   (eq 'src-block (car (org-element-at-point)))
				   (cons (company-grab-line "^<<\\(\\w*\\)" 1) t)))
      (candidates
       (org-element-map (org-element-parse-buffer) 'src-block
		 (lambda (src-block)
		   (let ((name (org-element-property :name src-block)))
			 (when name
			   (propertize
				name
				:value (org-element-property :value src-block)
				:annotation (org-element-property :raw-value (org-element-lineage src-block '(headline)))))))))
      (sorted t)            ; Show candidates in same order as doc
      (ignore-case t)
      (duplicates nil)               ; No need to remove duplicates
      (post-completion               ; Close the reference with ">>"
       (insert ">>"))
      ;; Show the contents of the block in a doc-buffer. If you have
      ;; company-quickhelp-mode enabled it will show in a popup
      (doc-buffer (company-doc-buffer (get-text-property 0 :value arg)))
      (annotation (format " [%s]" (get-text-property 0 :annotation arg)))))
  :hook (after-init . global-company-mode)
  :custom
  (company-minimum-prefix-length 0)
  (company-idle-delay 0.0)
  (company-backends '(company-bbdb
					  company-semantic
					  company-cmake
					  company-capf
					  ;; company-clang
					  company-files
					  (company-dabbrev-code company-gtags company-etags company-keywords)
					  company-oddmuse
					  company-dabbrev
					  ))
  :config
  (add-hook 'css-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-css))))
  (add-hook 'org-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-tempo +/noweb-reference))))
  :general
  (company-active-map
   "<tab>" #'company-indent-or-complete-common))
;; :config ())  ; Show message if verbose is activated
#+end_src   

*** Company Box
A company front-end with icons.
https://github.com/sebastiencs/company-box/   

#+begin_src emacs-lisp :tangle no
   (use-package company-box
     :after company
     :hook (company-mode . company-box-mode))
#+end_src
 
*** Company Emoji
Backend providing autocompletion for emoji.
https://github.com/dunn/company-emoji

#+begin_src emacs-lisp :tangle no
(use-package company-emoji
  :demand
  :after company
  :preface
  (defun --set-emoji-font (frame)
	"Adjust the font settings of FRAME so Emacs can display emoji properly."
	(if (eq system-type 'darwin)
		;; For NS/Cocoa
		(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
      ;; For Linux
      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))
  :config
  ;; For when Emacs is started in GUI mode:
  ;; (--set-emoji-font nil)
  ;; Hook for when a frame is created with emacsclient
  ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
  ;; (add-hook 'after-make-frame-functions '--set-emoji-font)
  (add-to-list 'company-backends 'company-emoji))	
#+end_src

** General
Convenience wrappers for keybindings.
https://github.com/noctuid/general.el

#+begin_src emacs-lisp :tangle no :noweb-ref general
(use-package general
  :demand
  :config
  (general-auto-unbind-keys)  ; Automatic Key Unbinding

  (defconst my-leader "SPC")
  (general-create-definer my-leader-def
    :states '(normal insert visual emacs)     
    :keymaps 'override
    :prefix my-leader
    :global-prefix "C-SPC")

  (general-def "<escape>" #'keyboard-escape-quit)

  (my-leader-def
    "e r"   '((lambda () (interactive) (load-file "~/.config/emacs-vanilla/init.el")) :which-key "Reload emacs config")
    "e i"   '((lambda () (interactive) (find-file "~/.config/emacs-vanilla/README.org")) :which-key "Open emacs config")
    "e k"   '((lambda () (interactive) (kill-emacs)) :which-key "Exit the emacs job and kill it")
    "b i"   '(ibuffer :which-key "Ibuffer")
    "b k"   '(kill-current-buffer :which-key "Kill current buffer")
    "b n"   '(next-buffer :which-key "Next buffer")
    "b p"   '(previous-buffer :which-key "Previous buffer")
    "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
    "b K"   '(kill-buffer :which-key "Kill buffer")))
					;"t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines")
#+end_src

** Hydra
Make bindings that stick around.
https://github.com/abo-abo/hydra

#+begin_src emacs-lisp
  (use-package hydra
	:config
	  (defhydra hydra-zoom (:timeout 4)
		"zoom"
		("l" text-scale-increase "in")
		("h" text-scale-decrease "out")
		("f" nil "finished" :exit t))

	  (defhydra hydra-yank-pop ()
		"yank"
		("C-y" yank nil)
		("M-y" yank-pop nil)
		("y" (yank-pop 1) "next")
		("Y" (yank-pop -1) "prev")
		("l" helm-show-kill-ring "list" :color blue))   ; or browse-kill-ring
	:general
	  (my-leader-def
		"z z" '(hydra-zoom/body :which-key "scale text")
		"M-y" '(hydra-yank-pop/yank-pop :which-key "yank pop")
		"C-y" '(hydra-yank-pop/yank :which-key "yank")))
#+end_src

** Ivy
Incremental Vertical completYon
https://github.com/abo-abo/swiper

#+begin_src emacs-lisp :tangle no
  (use-package ivy
    :config
    (ivy-mode 1)
    :general
    ("C-s" 'swiper)
    (ivy-minibuffer-map
     "TAB" 'ivy-alt-done
     "M-l" 'ivy-alt-done
     "M-j" 'ivy-next-line
     "M-k" 'ivy-previous-line)
    (ivy-switch-buffer-map
     "M-k" 'ivy-previous-line
     "M-l" 'ivy-done
     "M-d" 'ivy-switch-buffer-kill)
    (ivy-reverse-i-search-map
     "M-k" 'ivy-previous-line
     "M-d" 'ivy-reverse-i-search-kill))
#+end_src

*** Ivy Rich
More friendly display transformer for ivy
https://github.com/Yevgnen/ivy-rich

#+begin_src emacs-lisp :tangle no
  (use-package ivy-rich
    :after ivy
    :config
    (ivy-rich-mode 1))
#+end_src

*** Ivy Hydra 
 Additional key bindings for Ivy
 https://github.com/abo-abo/swiper

 #+begin_src emacs-lisp :tangle no
   (use-package ivy-hydra
     :after (ivy hydra))
 #+end_src
 
** Rainbow Delimiters
Highlight brackets according to their depth
https://github.com/Fanael/rainbow-delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ghook 'prog-mode-hook)
#+end_src

** Rainbow Identifiers
Highlight identifiers according to their names
https://github.com/Fanael/rainbow-identifiers

#+begin_src emacs-lisp :tangle no
  (use-package rainbow-identifiers
    :hook (prog-mode . rainbow-identifiers-mode)
    :config ())  ; Show message if verbose is activated
#+end_src

** Smooth Scrolling
A minor mode which make emacs scroll smoothly.
https://github.com/aspiers/smooth-scrolling

#+begin_src emacs-lisp :tangle no
(use-package smooth-scrolling
  :ghook 'after-init-hook
  :custom
  (smooth-scroll-margin 4)
  (smooth-scroll-strict-margins t)
  :config ())  ; Show message if verbose is activated
#+end_src

** Tab Bar
Frame-local tabs.

#+begin_src emacs-lisp :tangle no
(use-package tab-bar
  :demand
  :custom
  ; Defines what to do when the last tab is closed
  (tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
  (tab-bar-close-tab-select 'left)  ; Defines what tab to select after closing the specified tab
  (tab-bar-new-tab-choice "*scratch*")  ; Defines what to show in a new tab
  (tab-bar-show 1)  ; Defines when to show the tab bar
  :config
  (tab-bar-mode 1)
  :general
  (evil-normal-state-map
   ":" 'execute-extended-command
   "K" 'tab-bar-switch-to-next-tab
   "J" 'tab-bar-switch-to-prev-tab)
  (my-leader-def
    "t t" '(tab-bar-new-tab :which-key "New tab")
    "t q" '(tab-bar-close-tab :which-key "Close tab")
    "t c" '(tab-bar-close-other-tabs :which-key "Close all tabs, except the selected one")
    "t r" '(tab-bar-switch-to-recent-tab :which-key "Recent tab")
    "t k" '(tab-bar-switch-to-next-tab :which-key "Next tab")
    "t j" '(tab-bar-switch-to-prev-tab :which-key "Previous tab")
    "t u" '(tab-bar-undo-close-tab :which-key "Restore the last closed tab")
    "t h" '(tab-bar-history-mode :which-key "Toggle tab history mode")
    "t f" '(find-file-other-tab :which-key "Edit file in another tab")
    ; Rebind join, and lookup (default K and J vim keybindigs)
    "k" '(evil-lookup :which-key "Look up the keyword at point")
    "j" '(evil-join :which-key "Join the selected lines")))
#+end_src

** Treemacs
A tree layout file explorer for Emacs
https://github.com/Alexander-Miller/treemacs

#+begin_src emacs-lisp
(use-package treemacs
  ;; :ghook ('(prog-mode-hook) #'treemacs)
  :custom
  (treemacs-display-in-side-window          nil)
  ;; (treemacs-expand-after-init               t)
  ;; (treemacs-position                        'left)
  ;; (treemacs-silent-filewatch                nil)
  ;; (treemacs-silent-refresh                  nil)
  ;; (treemacs-sorting                         'alphabetic-asc)
  ;; (treemacs-user-mode-line-format           "none")
  (treemacs-width                           28)
  :general
  ("M-0"   #'treemacs-select-window)
  (my-leader-def
	"0 0" #'treemacs
	"0 b" #'treemacs-bookmark
	"0 t" #'treemacs-find-tag
	"0 f" #'treemacs-find-file
	"0 d" #'treemacs-delete-other-windows))
#+end_src
   
** Whitespace
Visualize blanks (TAB, (HARD) SPACE and NEWLINE).

#+begin_src emacs-lisp :tangle no
  (use-package whitespace
    :straight nil
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (whitespace-display-mappings  ; Specify an alist of mappings for displaying characters
     '((tab-mark 9 [8677 9] [92 9])  ;| 124  ⇥ 8677  ⇨ 8680  ↦ 8614
       (space-mark 32 [183] [46])
       (newline-mark 10 [182 10])))
    (whitespace-style '(tabs tab-mark))  ; Specify which kind of blank is visualized
    ; Tabs tab-mark trailing indentation indentation::tab indentation::space
    :custom-face
    (whitespace-tab ((t (:foreground "#c1c1c1"))))
    :config 
    (whitespace-mode 1))  ; Toggle whitespace visualization globally
#+end_src

* Files
Support for editing files.

#+begin_src emacs-lisp :tangle early-init.el
  ;; (use-package files
  ;;   :ensure nil
  ;;   :custom (revert-buffer-function 'inform-revert-modified-file))

  ; Prevent Emacs from asking "modified buffers exist; exit anyway?"
  (defun +/my-save-buffers-kill-emacs (&optional arg)
	"Offer to save each buffer(once only), then kill this Emacs process.
  With prefix ARG, silently save all file-visiting buffers, then kill."
	(interactive "P")
	(save-some-buffers arg t)
	(and (or (not (fboundp 'process-list))
		 ;; process-list is not defined on MSDOS.
		 (let ((processes (process-list))
		   active)
		   (while processes
			 (and (memq (process-status (car processes)) '(run stop open listen))
			  (process-query-on-exit-flag (car processes))
			  (setq active t))
			 (setq processes (cdr processes)))
		   (or (not active)
		   (progn (list-processes t)
			  (yes-or-no-p "Active processes exist; kill them and exit anyway? ")))))
		 ;; Query the user for other things, perhaps.
		 (run-hook-with-args-until-failure 'kill-emacs-query-functions)
		 (or (null confirm-kill-emacs)
		 (funcall confirm-kill-emacs "Really exit Emacs? "))
		 (kill-emacs)))
  (fset 'save-buffers-kill-emacs '+/my-save-buffers-kill-emacs)

  ; Smooth Scroll
  (setq 
   ;; redisplay-dont-pause nil
		;; scroll-margin 3
		scroll-step 1)
		;; scroll-conservatively 10000
		;; scroll-preserve-screen-position 1)

   ;; (setq scroll-margin 1
   ;;      scroll-conservatively 0
   ;;      scroll-up-aggressively 0.01
   ;;      scroll-down-aggressively 0.01)
   ;;    (setq-default scroll-up-aggressively 0.01
   ;; (setq scroll-conservatively 10000)
	  ;; (setq auto-window-vscroll nil);;      scroll-down-aggressively 0.01)

#+end_src

** Auto Save
Preventing accidental loss of data.

#+begin_src emacs-lisp :tangle early-init.el
(setq auto-save-interval 500)
#+end_src

** Backup 
Backups of edited data files.

#+begin_src emacs-lisp :tangle early-init.el
  (setq make-backup-files nil)  ; Non-nil means make a backup of a file the first time it is saved.
#+end_src

** Dired
Directory editing.

#+begin_src emacs-lisp :tangle no
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-listing-switches "-ahl -v --group-directories-first")
  (dired-auto-revert-buffer t)  ; Automatically revert Dired buffers on revisiting their directory
  (dired-dwim-target t)  ; suggest a target for moving/copying intelligently
  (dired-hide-details-hide-symlink-targets nil)
  (dired-recursive-copies  'always)  ; Always copy/delete recursively
  (dired-recursive-deletes 'top)  ; Whether dired deletes directories recursively
  (dired-create-destination-dirs 'ask)
  :config
  ; Don't complain about this command being disabled when we use it
  (put 'dired-find-alternate-file 'disabled nil)
  :general
  (:states 'normal :keymaps 'dired-mode-map
	  "h" #'dired-up-directory
	  "l" #'dired-find-file))
#+end_src

*** All the Icons Dired
A library for inserting Developer icons
https://github.com/domtronn/all-the-icons.el

#+begin_src emacs-lisp :tangle no
  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
    
*** Ranger

#+begin_src emacs-lisp
  ;; (use-package ranger
  ;; :demand
  ;; :init (ranger-override-dired-mode t))
  ;; :init (setq ranger-override-dired t))
  ;; :custom 
  ;; (ranger-cleanup-on-disable t)
  ;; (ranger-excluded-extensions '("mkv" "iso" "mp4"))
  ;; (ranger-deer-show-details t)
  ;; (ranger-max-preview-size 10)
  ;; (ranger-show-literal nil)
  ;; (ranger-hide-cursor nil)
#+end_src

*** Rsync
Asynchronous rsync from dired
https://github.com/stsquad/dired-rsync

#+begin_src emacs-lisp :tangle no
(use-package dired-rsync
  :general
  (dired-mode-map "C-c C-r" 'dired-rsync))
#+end_src>

*** Diredfl
Extra font lock rules for a more colourful dired
https://github.com/purcell/diredfl

#+begin_src emacs-lisp :tangle no
(use-package diredfl
  :hook (dired-mode . diredfl-mode))
#+end_src>

*** Diredx

#+begin_src emacs-lisp :tangle no
  (use-package dired-x
	:straight nil
	:hook (dired-mode . dired-omit-mode)
	:config
	(setq dired-omit-verbose nil
		  dired-omit-files
		  (concat dired-omit-files
				  "\\|^.DS_Store\\'"
				  "\\|^.project\\(?:ile\\)?\\'"
				  "\\|^.\\(svn\\|git\\)\\'"
				  "\\|^.ccls-cache\\'"
				  "\\|\\(?:\\.js\\)?\\.meta\\'"
				  "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))
	;; Disable the prompt about whether I want to kill the Dired buffer for a
	;; deleted directory. Of course I do!
	(setq dired-clean-confirm-killing-deleted-buffers nil))
	;; Let OS decide how to open certain files
	;; (map! :map dired-mode-map
	;; 	  :localleader
	;; 	  "h" #'dired-omit-mode))
#+end_src

*** Fd-dired
https://github.com/yqrashawn/fd-dired

#+begin_src emacs-lisp :tangle no
(use-package fd-dired
  :defer t
  :init
  (global-set-key [remap find-dired] #'fd-dired))
#+end_src

*** Dired Aux

#+begin_src emacs-lisp :tangle no
  (use-package dired-aux
	:straight nil
	:defer t
	:config
	(setq dired-create-destination-dirs 'ask
		  dired-vc-rename-file t))
#+end_src

*** Diff-hl
Highlight uncommitted changes using VC
https://github.com/dgutov/diff-hl

#+begin_src emacs-lisp :tangle no
(use-package diff-hl
  :hook 
  (dired-mode . diff-hl-dired-mode-unless-remote)
  (magit-post-refresh . diff-hl-magit-post-refresh)
  :config
  ; use margin instead of fringe
  (diff-hl-margin-mode))
#+end_src>

*** Single
Reuse the current dired buffer to visit a directory
https://github.com/crocket/dired-single

#+begin_src emacs-lisp :tangle no
  (use-package dired-single
    :after dired)
    ;:config
    ;(:keymaps '(dired-mode-map evil-normal-state-map)
    ;(evil-collection-define-key 'normal 'dired-mode-map
     ;"h" 'dired-single-up-directory
     ;"l" 'dired-single-buffer))
#+end_src

*** Hide Dotfiles
Hide dotfiles in dired
https://github.com/mattiasb/dired-hide-dotfiles

#+begin_src emacs-lisp :tangle no
  (use-package dired-hide-dotfiles
    :after dired
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :general
    (dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src    

*** Open
Open files from dired using using custom actions

#+begin_src emacs-lisp :tangle no
  (use-package dired-open
    :after dired
    :commands
    (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    ;; -- OR! --
    (setq dired-open-extensions '(("png" . "sxiv")
				  ("mkv" . "mpv"))))
#+end_src
    
*** Peep Dired
*** Empty

#+begin_src emacs-lisp
  ;(setq split-height-threshold nil)
  ;(setq split-width-threshold 0)

  ;(custom-set-variables
  ; '(ediff-window-setup-function 'ediff-setup-windows-plain)
  ; '(ediff-diff-options "-w")
  ; '(ediff-split-window-function 'split-window-horizontally))
  ;(add-hook 'ediff-after-quit-hook-internal 'winner-undo)

  ;(setq split-width-threshold (- (window-width) 10))
  ;(setq split-height-threshold nil)
  ;
  ;(defun count-visible-buffers (&optional frame)
  ;  "Count how many buffers are currently being shown. Defaults to selected frame."
  ;  (length (mapcar #'window-buffer (window-list frame))))
  ;
  ;(defun do-not-split-more-than-two-windows (window &optional horizontal)
  ;  (if (and horizontal (> (count-visible-buffers) 1))
  ;      nil
  ;    t))
  ;
  ;(advice-add 'window-splittable-p :before-while #'do-not-split-more-than-two-windows)
#+end_src

** Find File
Finding files.

** No Litering
Help keeping ~/.config/emacs clean
https://github.com/emacscollective/no-littering

#+begin_src emacs-lisp :tangle no :noweb-ref no-littering
  (use-package no-littering
    :demand
    :init
    (setq 
     no-littering-etc-directory (expand-file-name "conf" user-emacs-directory)
     no-littering-var-directory (expand-file-name "data" user-emacs-directory)
     custom-file (expand-file-name "custom.el" user-emacs-directory)
     auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save") t))
     url-history-file (expand-file-name "data/url/history" user-emacs-directory)))
#+end_src

** Recentf

#+begin_src emacs-lisp
  (use-package recentf
    :demand
    :custom
    (recentf-max-menu-items 25)
    :config
    (recentf-mode 1)
    (with-eval-after-load 'no-littering
      (add-to-list 'recentf-exclude no-littering-var-directory)
      (add-to-list 'recentf-exclude no-littering-etc-directory)))
    ;; :general
    ;; (my-leader-def 
      ;; "r" #'recentf-open-files))
#+end_src

* Text
Support for editing text files.

** Outlines
Support for hierarchical outlining.

*** Org 
Outline-based notes management and organizer.
https://orgmode.org

#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  :preface
  (defun +/org-babel-tangle-config ()
    "Tangle an org file automatically after save if it is inside of user-emacs-directory variable"
    (let ((dir-conf (directory-file-name (expand-file-name user-emacs-directory)))
	  (dir-file (directory-file-name (file-name-directory (expand-file-name (buffer-file-name))))))
  (when (string-equal dir-conf dir-file)
	(let ((ext-conf (concat "org"))
	  (ext-file (file-name-extension (buffer-file-name))))
	  (when (string-equal ext-conf ext-file)
	    (let ((org-confirm-babel-evaluate nil))  ; Dynamic scoping to the rescue
	  (org-babel-tangle)))))))
  :gfhook
  #'(lambda () (add-hook 'after-save-hook #'+/org-babel-tangle-config))
  ;; #'variable-pitch-mode
  ;; #'auto-fill-mode ;; #'turn-on-auto-fill
  :config
  <<org-config>>
  :custom
  (org-support-shift-select 'always)
  <<org-custom>>
  :general
  (:states 'normal :keymaps 'org-mode-map
   "M-j" #'org-next-visible-heading
   "M-k" #'org-previous-visible-heading
   "C-j" #'org-metadown
   ;; "C-'" #'org-edit-special
   "C-k" #'org-metaup))
  ;; (my-leader-def
  ;;   "a" #'org-agenda
  ;;   "c" #'org-capture
  ;;   "l" #'org-store-link))
#+end_src

**** Agenda
Options concerning agenda views in Org mode.

#+begin_src emacs-lisp
  ; Regular expression to match files for ‘org-agenda-files’
  ;(setq org-agenda-file-regexp )

  ; The files to be used for agenda display
  ;(setq org-agenda-files '("/media/files/Ricardo/Documents/Lists"))


  ; Information to record when a task moves to the DONE state
  ;(setq org-log-done 'time)    ; Add a time stamp to the task


  ; Non-nil means insert state change notes and time stamps into a drawer
  ;(setq org-log-into-drawer t)
#+end_src

***** Org Agenda Startup
Options concerning initial settings in the Agenda in Org Mode.

#+begin_src emacs-lisp
  ; The initial value of log-mode in a newly created agenda window. More
  (setq org-agenda-start-with-log-mode t)
#+end_src

**** Appearance
Settings for Org mode appearance.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(setq org-hide-leading-stars t  ; Non-nil means hide the first N-1 stars in a headline
	  org-image-actual-width 300
	  org-src-fontify-natively t
	  org-hide-emphasis-markers nil
      org-ellipsis " ↴")  ; The ellipsis to use in the Org mode outline (▾  ↴)
#+end_src

***** Org Faces
Faces in Org mode

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(setq org-fontify-quote-and-verse-blocks t)

;; (dolist (face 
;; 	 '((org-level-1 . 1.2)
;; 	   (org-level-2 . 1.18)
;; 	   (org-level-3 . 1.16)
;; 	   (org-level-4 . 1.14)
;; 	   (org-level-5 . 1.12)
;; 	   (org-level-6 . 1.1)
;; 	   (org-level-7 . 1.1)
;; 	   (org-level-8 . 1.1)))
;;   (set-face-attribute (car face) nil
;; 		  :font "FiraCode Nerd Font"
;; 		  :weight 'medium
;; 		  :height (cdr face)))

;(set-face-attribute 'org-document-title nil :font "FiraCode Nerd Font" :weight 'bold :height 1.3)

; Ensure that anything that should be fixed-pitch in Org files appears that way
; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
; (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

; ; Get rid of the background on column views
; (set-face-attribute 'org-column nil :background nil)
; (set-face-attribute 'org-column-title nil :background nil)
; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-property-value ((t (:inherit fixed-pitch))) t)
; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

***** Org Superstar
Prettify headings and plain lists in Org mode
https://github.com/integral-dw/org-superstar-mode

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :ghook 'org-mode-hook
    :custom
    (org-superstar-headline-bullets-list '("●" "◉" "○" "◉" "○"))
    :config ())  ; Show message if verbose is activated
#+end_src

**** Babel
Code block evaluation and management in ‘org-mode’ documents.

#+begin_src emacs-lisp :tangle no :noweb-ref org-mode-config
  ;  (org-babel-do-load-languages
  ;	'org-babel-load-languages
  ;	'((emacs-lisp . t)
  ;	  (ledger . t)))

  ;(defun org-babel-tangle-block()
  ;  (interactive)
  ;  (let ((current-prefix-arg '(4)))
  ;    (call-interactively 'org-babel-tangle)
  ;))

  ; Conf files highlit
   ;(push '("conf-unix" . conf-unix) org-src-lang-modes)

; Confirm before evaluation
(setq org-confirm-babel-evaluate nil
	  org-src-tab-acts-natively t)

; Local Variables:
; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
; End:
(add-to-list 'safe-local-variable-values
	     '(eval add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t))
#+end_src

**** Export
Options for exporting Org mode files.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
(org-export-backends '(ascii html icalendar latex man md odt org))
#+end_src

***** Org Export ODT
Options for exporting Org mode files to ODT.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(setq org-odt-preferred-output-format "pdf")  ; Require LibreOffice (docx)
(setq org-odt-category-map-alist
      '(("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p)))
#+end_src

***** Org Export General
General options for export engine.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(setq org-export-in-background t
	  org-export-with-toc nil)
#+end_src

**** Indent
Options concerning dynamic virtual outline indentation.

**** Properties
Options concerning properties in Org mode.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (setq org-use-property-inheritance t)
#+end_src

**** Startup

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(setq org-startup-align-all-tables t  ; Non-nil means align all tables when visiting a file
	  org-startup-truncated nil  ; Non-nil means entering Org mode will set truncate-lines
	  org-startup-with-inline-images t
	  org-startup-folded t  ; Non-nil means entering Org mode will switch to OVERVIEW
	  org-hide-block-startup nil
	  org-startup-indented nil)  ; Non-nil means turn on org-indent-mode on startup
#+end_src

**** Structure
Options concerning the general structure of Org files.

***** Cycle
Options concerning visibility cycling in Org mode.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(setq org-cycle-separator-lines 2)
#+end_src

***** Edit Structure
Options concerning structure editing in Org mode.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(setq org-edit-src-content-indentation 0
	  org-src-preserve-indentation nil)

(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

** Visual Fill Column
Fill-column for visual-line-mode.
https://github.com/joostkremers/visual-fill-column

#+begin_src emacs-lisp
(setq-default fill-column 80)

(use-package visual-fill-column
  :ghook 'org-mode-hook
  :custom
  (visual-fill-column-width 100)
  (visual-fill-column-center-text t)
  :config ())  ; Show message if verbose is activated
#+end_src

** Lorem Ipsum
Add filler lorem ipsum text to Emacs
https://github.com/jschaf/emacs-lorem-ipsum

#+begin_src emacs-lisp
(use-package lorem-ipsum
  :custom
  (Lorem-ipsum-paragraph-separator “\n\n”)
  (Lorem-ipsum-sentence-separator “ “)
  (Lorem-ipsum-list-beginning “”)
  (Lorem-ipsum-list-bullet “* “)
  (Lorem-ipsum-list-item-end “\n”)
  (Lorem-ipsum-list-end “”)
  :general
  (my-leader-def
	"l i" '(:ignore t :which-key "Lorem Ipsum")
    "l i s" '(lorem-ipsum-insert-sentences :which-key "Sentence")
    "l i p" '(lorem-ipsum-insert-paragraphs :which-key "Paragraph")
    "l i l" '(lorem-ipsum-insert-list :which-key "List"))
  :config ())  ; Show message if verbose is activated
#+end_src

* Data
Support for editing binary data files.

* External
Interfacing to external utilities.

** Processes
Process, subshell, compilation, and job control support.

*** Eshell
The Emacs command shell

#+begin_src emacs-lisp
(use-package eshell
  :straight (:type built-in)
  :gfhook ('eshell-pre-command-hook #'eshell-save-some-history)
  :custom
  (eshell-history-size 8000)
  (eshell-buffer-maximum-lines 8000)
  (eshell-hist-ignoredups t)
  (eshell-scroll-to-bottom-on-input t)
  :config
  ; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
  :general
  (my-leader-def
	"e s" '(eshell :which-key "Eshell")))
#+end_src

**** Eshell Git Prompt
Themes for emacs shell (eshell) prompt.
https://github.com/xuchunyang/eshell-git-prompt

#+begin_src emacs-lisp
(use-package eshell-git-prompt
  :demand
  :after eshell
  :config
  (eshell-git-prompt-use-theme 'powerline))

;;Running programs in a term-mode buffer
;(with-eval-after-load 'esh-opt
;  (setq eshell-destroy-buffer-when-process-dies t)
;  (setq eshell-visual-commands '("htop" "zsh" "vim")))
#+end_src
 
*** Shell
Running shell from within Emacs buffers.

#+begin_src emacs-lisp
 ;; (use-package shell
 ;;   :straight (:type built-in)
 ;;   :custom
 ;;   (comint-output-filter-functions
 ;;    (remove 'ansi-color-process-output comint-output-filter-functions)))

	;In Windows if you like PowerShell you can use this config:
	; Kudos to Jeffrey Snover: https://docs.microsoft.com/en-us/archive/blogs/dotnetinterop/run-powershell-as-a-shell-within-emacs
	;(explicit-shell-file-name "powershell.exe")
	;(explicit-powershell.exe-args '())

  ;  (add-hook 'shell-mode-hook
  ;      (lambda ()
  ;	;; Disable font-locking in this buffer to improve performance
  ;	(font-lock-mode -1)
  ;	;; Prevent font-locking from being re-enabled in this buffer
  ;	(make-local-variable 'font-lock-function)
  ;	(setq font-lock-function (lambda (_) nil))
  ;	(add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))

  ; Better colors: https://github.com/atomontage/xterm-color
#+end_src

*** Term
General command interpreter in a window.
NOTE: term-mode doesn’t work on Windows: “Spawning child process: invalid argument”

#+begin_src emacs-lisp
(use-package term
  :straight (:type built-in)
  :custom
  (term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  (explicit-shell-file-name "zsh")
  (explicit-zsh-args '())
  :config ())  ; Show message if verbose is activated
#+end_src

**** Eterm 256Color
Uses xterm-color to add customizable 256 color support to term and ansi-term.
https://github.com/dieggsy/eterm-256color

#+begin_src emacs-lisp
(use-package eterm-256color
  :after term
  :ghook 'term-mode-hook
  :config ())  ; Show message if verbose is activated
#+end_src

*** Vterm

 #+begin_src emacs-lisp
 (use-package vterm
   :straight (:type built-in)
   :config
   (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
   (setq vterm-shell "zsh")
   (setq vterm-max-scrollback 10000))
 #+end_src

** Server
Emacs running as a server process.

#+begin_src emacs-lisp
  ;(server-start)  ; Allow this Emacs process to be a server for client processes
  ;(setq show-value-server-raise-frame t)  ; If non-nil, raise frame when switching to a buffer
  ;(setq server-window (pop-to-buffer (current-buffer) t)) ; Specification of the window to use for selecting Emacs server buffers
#+end_src

** Magit
A Git porcelain inside Emacs.
https://github.com/magit/magit

#+begin_src emacs-lisp
(use-package magit
  :demand)
  ;; :commands (magit-status magit-get-current-branch magit-version))
  ;; :bind ("C-M-;" . magit-status)
  ;; :custom
  ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  ;; :general
  ;; (my-leader-def
  ;;   "g"   '(:ignore t :which-key "git")
  ;;   "g s"  'magit-status
  ;;   "g d"  'magit-diff-unstaged
  ;;   "g c"  'magit-branch-or-checkout
  ;;   "g l"   '(:ignore t :which-key "log")
  ;;   "g l c" 'magit-log-current
  ;;   "g l f" 'magit-log-buffer-file
  ;;   "g b"  'magit-branch
  ;;   "g P"  'magit-push-current
  ;;   "g p"  'magit-pull-branch
  ;;   "g f"  'magit-fetch
  ;;   "g F"  'magit-fetch-all
  ;;   "g r"  'magit-rebase))
#+end_src

* Communication
Communications, networking, and remote access to files.

** Elfeed
An Emacs Atom/RSS feed reader.
https://github.com/skeeto/elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :custom
  (elfeed-search-filter "@3-days-ago")
  :general
  (my-leader-def
	"e f" #'elfeed)
  :config ())  ; Show message if verbose is activated
#+end_src

*** Elfeed Org
Configure the Elfeed RSS reader with an Orgmode file
https://github.com/remyhonig/elfeed-org

#+begin_src emacs-lisp
(use-package elfeed-org
  :demand
  :after elfeed
  :custom
  (rmh-elfeed-org-files (list "/media/files/Ricardo/Documents/Notes/rss.org"))
  :config ())  ; Show message if verbose is activated
#+end_src

** Telega
Featured unofficial client for Telegram platform for GNU Emacs.
https://github.com/zevlg/telega.el

#+begin_src emacs-lisp :tangle no
  (use-package telega)
#+end_src

** ERC
#+begin_src emacs-lisp
(use-package erc
  :straight (:type built-in)
  :commands (erc erc-tls)
  :config
  (setq erc-server "irc.libera.chat"
		erc-nick "raisak"
		;; erc-user-full-name "Ricardo Gomez"
		erc-track-shorten-start 8
		erc-autojoin-channels-alist '(("irc.libera.chat" "#emacs" "#systemcrafters"))
		erc-kill-buffer-on-part t
        erc-auto-query 'bury))
#+end_src

* Programming
Support for programming in other languages.

** Languages
Modes for editing programming languages.

*** C
Support for the C language and related languages.

**** Cpp
Highlight or hide text according to cpp conditionals.

#+begin_src emacs-lisp
(use-package cpp
  :straight (:type built-in)
  ;; :ghook 'c++-mode-hook
  :config
  (message "hello there!"))
;compile c++ whit f9
;(defun code-compile ()
;  (interactive)
;  (unless (file-exists-p "Makefile")
;    (set (make-local-variable 'compile-command)
;     (let ((file (file-name-nondirectory buffer-file-name)))
;       (format "%s -o %s %s"
;           (if  (equal (file-name-extension file) "cpp") "g++" "gcc" )
;           (file-name-sans-extension file)
;           file)))
;    (compile compile-command)))
;
;(global-set-key [f9] 'code-compile)

;; clang-format can be triggered using C-c C-f
;; Create clang-format file using google style
;; clang-format -style=google -dump-config > .clang-format
;; (require 'clang-format)
;; (global-set-key (kbd "C-c C-f") 'clang-format-region)

;; (require 'modern-cpp-font-lock)
;; (modern-c++-font-lock-global-mode t)
#+end_src

*** Css
Cascading Style Sheets (CSS) editing mode.

**** LessCss
Less CSS mode.

#+begin_src emacs-lisp
(use-package less-css-mode
  :straight (:type built-in)
  :config ())  ; Show message if verbose is activated
#+end_src

*** JavaScript
Major mode for editing JavaScript

#+begin_src emacs-lisp
(use-package js
  :straight (:type built-in)
  :config ())  ; Show message if verbose is activated
#+end_src

*** COMMENT GDScript
Major mode for Godot's GDScript language
https://github.com/godotengine/emacs-gdscript-mode

#+begin_src emacs-lisp
(use-package gdscript-mode
  :preface
  (defun +/lsp--gdscript-ignore-errors (original-function &rest args)
	"Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
	(if (string-equal major-mode "gdscript-mode")
		(let ((json-data (nth 0 args)))
		  (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
				   (not (gethash "id" json-data nil))
				   (not (gethash "method" json-data nil)))
			  nil ; (message "Method not found")
			(apply original-function args)))
	  (apply original-function args)))
  :custom
  (gdscript-use-tab-indents t)
  (gdscript-indent-offset 4)
  (gdscript-godot-executable "/bin/godot")
  (gdscript-gdformat-save-and-format t)
  :config
  ;; Runs the function `+/lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
  (advice-add #'lsp--get-message-type :around #'+/lsp--gdscript-ignore-errors))
#+end_src

*** Prog 
Generic programming mode, from which others derive.

#+begin_src emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src

*** Python
Python Language’s flying circus support for Emacs

#+begin_src emacs-lisp
;; (use-package python
  ;; :straight (:type built-in)
  ;; :custom
  ;; (python-shell-interpreter "python")
  ;; (dap-python-executable "python3")
  ;; (dap-python-debugger 'debugpy)
  ;; :config ())  ; Show message if verbose is activated
#+end_src

*** Sh Script
Shell script editing commands for Emacs.

#+begin_src emacs-lisp
(defun +sh--match-variables-in-quotes (limit)
  "Search for variables in double-quoted strings bounded by LIMIT."
  (with-syntax-table sh-mode-syntax-table
    (let (res)
      (while
          (and (setq res
                     (re-search-forward
                      "[^\\]\\(\\$\\)\\({.+?}\\|\\<[a-zA-Z0-9_]+\\|[@*#!]\\)"
                      limit t))
               (not (eq (nth 3 (syntax-ppss)) ?\"))))
      res)))

(defun +sh--match-command-subst-in-quotes (limit)
  "Search for variables in double-quoted strings bounded by LIMIT."
  (with-syntax-table sh-mode-syntax-table
    (let (res)
      (while
          (and (setq res
                     (re-search-forward "[^\\]\\(\\$(.+?)\\|`.+?`\\)"
                                        limit t))
               (not (eq (nth 3 (syntax-ppss)) ?\"))))
      res)))

(defvar +sh-builtin-keywords
  '("cat" "cd" "chmod" "chown" "cp" "curl" "date" "echo" "find" "git" "grep"
    "kill" "less" "ln" "ls" "make" "mkdir" "mv" "pgrep" "pkill" "pwd" "rm"
    "sleep" "sudo" "touch")
  "A list of common shell commands to be fontified especially in `sh-mode'.")

(use-package sh-script
  :straight (:type built-in)
  :mode ("\\.bats\\'" . sh-mode)
  :mode ("\\.\\(?:zunit\\|env\\)\\'" . sh-mode)
  :mode ("/bspwmrc\\'" . sh-mode)
  ;; :custom
  ;; (sh-indent-after-continuation 'always)
  :config
  ; Recognize function names with dashes in them
  (add-to-list 'sh-imenu-generic-expression
			   '(sh (nil "^\\s-*function\\s-+\\([[:alpha:]_-][[:alnum:]_-]*\\)\\s-*\\(?:()\\)?" 1)
					(nil "^\\s-*\\([[:alpha:]_-][[:alnum:]_-]*\\)\\s-*()" 1)))

  ;; 1. Fontifies variables in double quotes
  ;; 2. Fontify command substitution in double quotes
  ;; 3. Fontify built-in/common commands (see `+sh-builtin-keywords')
  (+/add-hook 'sh-mode-hook
	(defun +sh-init-extra-fontification-h ()
	  (font-lock-add-keywords
	   nil `((+sh--match-variables-in-quotes
			  (1 'font-lock-constant-face prepend)
			  (2 'font-lock-variable-name-face prepend))
			 (+sh--match-command-subst-in-quotes
			  (1 'sh-quoted-exec prepend))
			 (,(regexp-opt +sh-builtin-keywords 'symbols)
			  (0 'font-lock-type-face append)))))))
#+end_src

**** Company Shell

#+begin_src emacs-lisp :tangle no
  (use-package! company-shell
  :when (featurep! :completion company)
  :unless (featurep! +lsp)
  :after sh-script
  :config
  (set-company-backend! 'sh-mode '(company-shell company-files))
  (setq company-shell-delete-duplicates t))
 #+end_src

**** PowerShell

#+begin_src emacs-lisp :tangle no
(use-package! powershell
  :when (featurep! +powershell)
  :defer t
  :config
  (when (featurep! +lsp)
    (add-hook 'powershell-mode-local-vars-hook #'lsp!)))
#+end_src

** Tools
Programming tools.

*** Eglot
Emacs Polyglot: An Emacs LSP client that stays out of your way.
https://github.com/joaotavora/eglot

#+begin_src emacs-lisp :tangle no
(use-package eglot
  :hook (sh-mode . 'eglot-ensure))
#+end_src

*** LSP
Client for Language Server Protocol
https://github.com/emacs-lsp/lsp-mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((html-mode
		  css-mode
		  js-mode
		  c++-mode
          sh-mode
		  python-mode
          gdscript-mode) . lsp-deferred)

         ; Which-key integration
         (lsp-mode . lsp-enable-which-key-integration)
  :custom
  (lsp-keymap-prefix "C-c l")
  (lsp-modeline-diagnostics-scope :workspace)
  (lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-modeline-code-actions-segments '(count icon name))
  :config
  (lsp-headerline-breadcrumb-mode 1)
  (lsp-modeline-code-actions-mode 1))
#+end_src

**** DAP
Emacs client/library for Debug Adapter Protocol.
https://github.com/emacs-lsp/dap-mode

#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :config
  (dap-mode 1)

  ; UI
  (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (tooltip-mode 1)
  (dap-ui-controls-mode 1)


  ; C++
  ;; (require 'dap-gdb-lldb)
  ;; (dap-gdb-lldb-setup)

  ;Python
  ;; (require 'dap-python)
  
  ; Javascript
  (require 'dap-node)
  (dap-node-setup)

  (add-hook 'dap-stopped-hook
			(lambda (arg) (call-interactively #'dap-hydra)))

  ;; Bind `C-c l d` to `dap-hydra` for easy access
  (general-define-key
  :keymaps 'lsp-mode-map
  :prefix lsp-keymap-prefix
  "d" '(dap-hydra t :wk "debugger")))
#+end_src

**** LSP Jedi
A Emacs client for Python Jedi Language Server (LSP client plugin for lsp-mode Emacs extension).
https://github.com/fredcamps/lsp-jedi

#+begin_src emacs-lisp
(use-package lsp-jedi
  :hook (python-mode . (lambda ()
                       (require 'lsp-jedi)
                       (lsp)))  ; or lsp-deferred
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))
#+end_src
	 
**** LSP Treemacs
Integration between lsp-mode and treemacs and implementation of treeview controls using treemacs as a tree renderer.
https://github.com/emacs-lsp/lsp-treemacs

#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after lsp-mode
  :commands lsp-treemacs-errors-list
  :config
  (lsp-treemacs-sync-mode 1))
#+end_src
	 
**** LSP UI
Contains all the higher level UI modules of lsp-mode, like flycheck support and code lenses.
https://github.com/emacs-lsp/lsp-ui

#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :custom
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-delay 0.6)
  :config ())  ; Show message if verbose is activated
#+end_src
	 
**** emacs-ccls

 #+begin_src emacs-lisp :tangle no
(use-package ccls
  :hook (c++-mode . (lambda ()
                       (require 'ccls)
                       (lsp)))  ; or lsp-deferred
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-enabled-clients 'ccls)))
 #+end_src

*** Projectile
A project interaction library for Emacs.
https://github.com/bbatsov/projectile

#+begin_src emacs-lisp
(use-package projectile
  :demand
  :custom
  (projectile-discover-projects-in-search-path t)
  (projectile-project-search-path
   '("/media/files/Ricardo/Documents/Github" "/media/files/Ricardo/Projects"))
  :config
  (projectile-mode 1)
  :general
  (my-leader-def
	"p" 'projectile-command-map))
#+end_src

*** RealGUD
A extensible, modular GNU Emacs front-end for interacting with external debuggers
https://github.com/realgud/realgud

#+begin_src emacs-lisp :tangle no
(use-package realgud
  :after lsp-mode)
#+end_src

*** Flycheck
Modern on-the-fly syntax checking extension for GNU Emacs.
https://github.com/flycheck/flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
;; (add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

* Applications
Applications written in Emacs.

** Package
Manager for Emacs Lisp packages.

#+begin_src emacs-lisp :tangle no :noweb-ref package
(require 'package)

; An alist of archives from which to fetch
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
						 ("melpa-stable" . "https://stable.melpa.org/packages/")
						 ("org" . "https://orgmode.org/elpa/")
						 ("elpa" . "https://elpa.gnu.org/packages/")))

; An alist of packages that are pinned to specific archives
;(setq package-archives 'package-pinned-packages '(org . "org"))

; Make installed packages available when Emacs starts
(package-initialize)

; Ensure that Emacs has fetched the package list
(unless package-archive-contents (package-refresh-contents))
#+end_src

** Straight
Next-generation, purely functional package manager for the Emacs hacker.
https://github.com/raxod502/straight.el

#+begin_src emacs-lisp :tangle no :noweb-ref straight
; Install straight if not installed
(defvar bootstrap-version)
(let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
	(with-current-buffer
		(url-retrieve-synchronously
		 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
		 'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** Use Package
A use-package declaration for simplifying your ‘.emacs’.
https://github.com/jwiegley/use-package

#+begin_src emacs-lisp :tangle no :noweb-ref use-package
; Use package.el
;(unless (package-installed-p 'use-package)
;  (package-install 'use-package))
;(eval-when-compile
;  (require 'use-package))

; Use straight.el
(straight-use-package 'use-package)

(setq straight-enable-use-package-integration t)
(setq straight-use-package-by-default t)

(setq use-package-always-defer t  
	  use-package-always-pin t
	  use-package-always-ensure nil
	  use-package-verbose nil)
#+end_src

*** Use Package Ensure System Package
Ensure system binaries exist alongside your package declarations
https://github.com/waymondo/use-package-ensure-system-package

#+begin_src emacs-lisp :tangle no
  (use-package use-package-ensure-system-package)  ; build-in in use-package
#+end_src

** Auto Package Update
Automatically update Emacs packages. (only for package.el)
https://github.com/rranelli/auto-package-update.el

#+begin_src emacs-lisp :tangle no
(use-package auto-package-update
  :hook (after-init . auto-package-update-minor-mode)
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

** Dashboard
An extensible emacs startup screen showing you what’s most important
https://github.com/emacs-dashboard/emacs-dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :hook (after-init . dashboard-refresh-buffer)
  :custom
  (dashboard-banner-logo-title "Welcome to Emacs!")
  (dashboard-center-content t)
  (dashboard-set-file-icons t)
  (dashboard-set-heading-icons t)
  (dashboard-show-shortcuts t)
  ;; (dashboard-startup-banner 'logo)
  (dashboard-startup-banner (expand-file-name "banner.txt" user-emacs-directory))
  (dashboard-items '((recents  . 5)
					 (bookmarks . 5)
					 (projects . 5)
					 ;; (agenda . 5)  ; This load org package
					 (registers . 5)))
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
	   "GitHub" "rgomezgerardi"
	   (lambda (&rest _) (browse-url "https://github.com/rgomezgerardi")))
	  (,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
	   "LinkedIn" "rgomezgerardi"
	   (lambda (&rest _) (browse-url "https://linkedin.com"))))))
  (dashboard-set-init-info t)
  (dashboard-init-info (+/display-startup-time))
  (dashboard-set-footer t)
  (dashboard-footer-messages
   '("Dashboard is pretty cool!"
	 "The one true editor, Emacs!"
	 "Who the hell uses VIM anyway? Go Evil!"
	 "Free as free speech, free as free Beer"
	 "Happy coding!"
	 "Vi Vi Vi, the editor of the beast"
	 "Go make yourself some friends, or you'll be lonely"
	 "Welcome to the church of Emacs"
	 "While any text editor can save your files, only Emacs can save your soul"
	 "What the fuck are you doing?"))
  :config
  ; Ensure emacsclient opens on *dashboard* rather than *scratch*
  (if (daemonp)
	  (setq initial-buffer-choice  
			(lambda () (get-buffer "*dashboard*")))))
#+end_src

** Nav Flash
Briefly highlight the current line in Emacs.
https://github.com/rolandwalker/nav-flash

#+begin_src emacs-lisp :tangle no
 (use-package nav-flash
   :demand
   :config
   (add-hook 'imenu-after-jump-hook 'nav-flash-show nil t))
#+end_src 
   
** Alert
A Growl-workalike for Emacs which uses a common notification interface and multiple, selectable "styles".
https://github.com/jwiegley/alert

#+begin_src emacs-lisp :tangle no
(use-package alert
:demand
:config
(alert-add-rule :status   '(buried visible idle)
                :severity '(moderate high urgent)
                :mode     'evil-smartparens-mode
                :style 'ignore
                :continue t))
#+end_src
   
* Development
Support for further development of Emacs.

** Internal
Code for Emacs internals, build process, defaults.

*** Storage Allocation
Storage allocation and gc for GNU Emacs Lisp interpreter.

**** Garbage Collector Magic Hack (GCMH)
Enforce a sneaky Garbage Collection strategy to minimize GC interference with user activity
https://gitlab.com/koral/gcmh

#+begin_src emacs-lisp :tangle no :noweb-ref gcmh
(use-package gcmh
  :demand
  :custom
  (garbage-collection-messages nil)
  (gcmh-verbose nil)
  ;(gcmh-high-cons-threshold)
  ;(gc-cons-threshold (* 50 1000 1000))  ; The default is 800 kilobytes
  ;(gc-cons-threshold (* 2 1000 1000))  ; Make gc pauses faster by decreasing the threshold
  :config ())  ; Show message if verbose is activated
#+end_src

* Environment
Fitting Emacs with its environment.

** Display
How characters are displayed in buffers.

#+begin_src emacs-lisp :tangle no
  ; Flash the mode-line to ring the alarm bell
  (setq visible-bell nil
	ring-bell-function
	(lambda ()
	  (unless (memq this-command
			'(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit evil-force-normal-state))
	    (invert-face 'mode-line)
	    (run-with-timer 0.1 nil #'invert-face 'mode-line))))
#+end_src

*** Line Numbers
Display line numbers in the buffer.

#+begin_src emacs-lisp
; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
				prog-mode-hook
				conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

; Disable line numbers for some modes
(dolist (mode '(term-mode-hook
				dashboard-mode-hook
				org-mode-hook
				treemacs-mode-hook
				eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Exec Path from Shell
Make Emacs use shell-defined such as $PATH etc.
https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp :tangle no :noweb-ref exec-path-from-shell
(use-package exec-path-from-shell
  :demand
  :config
  ;(pcase system-type
  ;  ('gnu/linux "It's Linux!")
  ;  ('windows-nt "It's Windows!")
  ;  ('darwin "It's macOS!"))
  (when (memq system-type '(gnu/linux darwin))
	(exec-path-from-shell-initialize)))
#+end_src

** Frames
Support for Emacs frames and window systems.

#+begin_src emacs-lisp :tangle early-init.el
  (menu-bar-mode 0)  ; Toggle display of a menu bar on each frame
  (scroll-bar-mode 0)  ; Toggle vertical scroll bars on all frames
  (tool-bar-mode 0)  ; Toggle the tool bar in all graphical frames
  ; Alist of default values for frame creation
  (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
       (add-to-list 'default-frame-alist '(alpha . (100 . 100)))
#+end_src

*** Fringe
Window fringes.

#+begin_src emacs-lisp :tangle early-init.el
  ; Default appearance of fringes on all frames.
  (setq set-fringe-mode 10)        ; Give some breathing room
#+end_src
   
** Initialization
Emacs start-up procedure.

#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-startup-echo-area-message t
	  ;; inhibit-startup-screen t
	  user-emacs-directory-warning t)

; Buffer to show after starting Emacs
(if (daemonp)  ; This is needed for emacsclient
	(setq initial-buffer-choice
		  (lambda () (get-buffer "*Messages*"))))

; Disable startup echo area message
(put 'inhibit-startup-echo-area-message 'saved-value t)
(setq inhibit-startup-echo-area-message (user-login-name))
;(fset 'display-startup-echo-area-message 'ignore)

;; (add-hook 'emacs-startup-hook #'+/display-startup-time)
#+end_src

** Minibuffer
Controlling the behavior of the minibuffer.

*** Consult
Practical commands based on the Emacs completion function completing-read.
https://github.com/minad/consult

#+begin_src emacs-lisp
(use-package consult
  :config
  ; Optionally configure a function which returns the project root directory.
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  :general
  ("M-p" 'consult-yank-pop)
  (:states 'normal :keymaps 'org-mode-map
   "M-/" 'consult-org-heading)
  (isearch-mode-map
   "M-e" 'consult-isearch                 ;; orig. isearch-edit-string
   "M-s e" 'consult-isearch               ;; orig. isearch-edit-string
   "M-s l" 'consult-line                  ;; needed by consult-line to detect isearch
   "M-s L" 'consult-line-multi)           ;; needed by consult-line to detect isearch
  (my-leader-def
	":" 'consult-complex-command
	"@" 'consult-register
	"#" 'consult-register-load
	"'" 'consult-register-store

    "h a" 'consult-apropos
	
	"c h" 'consult-history
	"c m" 'consult-mode-command
    "c b" 'consult-bookmark
    "c k" 'consult-kmacro

    "SPC" '(consult-buffer :which-key "Switch to buffer")
    "b w" '(consult-buffer-other-window :which-key "Switch to buffer other window")
    "b f" '(consult-buffer-other-frame :which-key "Switch to buffer other frame")

    "g l" 'consult-goto-line
	"g e" 'consult-compile-error
    "g f" 'consult-flymake  ;; Alternative: consult-flycheck
    "g o" 'consult-outline
    "g m" 'consult-mark
    "g k" 'consult-global-mark
    "g i" 'consult-imenu
    "g I" 'consult-imenu-multi

	"s f" 'consult-find
    "s F" 'consult-locate
    "s g" 'consult-grep
    "s G" 'consult-git-grep
    "s r" 'consult-ripgrep
    "s l" 'consult-line
    "s L" 'consult-line-multi
    "s m" 'consult-multi-occur
    "s k" 'consult-keep-lines
    "s u" 'consult-focus-lines
	"s e" 'consult-isearch))
#+end_src

**** Consult LSP
Let’s try to mimic a few features of helm-lsp and lsp-ivy in consult workflow.
https://github.com/gagbo/consult-lsp

#+begin_src emacs-lisp
(use-package consult-lsp
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))
#+end_src

*** Marginalia
Enrich existing commands with completion annotations.
https://github.com/minad/marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :ghook 'pre-command-hook
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :general
    (minibuffer-local-map
     "C-a" #'marginalia-cycle)
    :config ())  ; Show message if verbose is activated
#+end_src

*** Orderless
Completion method that matches space-separated regexps in any order.
https://github.com/oantolin/orderless

#+begin_src emacs-lisp
  (use-package orderless
	:custom 
	(completion-category-defaults nil)
	(orderless-component-separator "[ &]")
	(completion-styles '(orderless))
	(completion-category-overrides '((file (styles . (orderless partial-completion)))))
	:config ())  ; Show message if verbose is activated
	;; :config
	;; ...otherwise find-file gets different highlighting than other commands
	;; (set-face-attribute 'completions-first-difference nil :inherit nil)

	;; (setq orderless-style-dispatchers '(lambda (pattern _index _total) 
	;;   (cond
	;;    ;; Ensure $ works with Consult commands, which add disambiguation suffixes
	;;    ((string-suffix-p "$" pattern)
	;; 	`(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x100000-\x10FFFD]*$")))
	;;    ;; Ignore single !
	;;    ((string= "!" pattern) `(orderless-literal . ""))
	;;    ;; Without literal
	;;    ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
	;;    ;; Initialism matching
	;;    ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
	;;    ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
	;;    ;; Literal matching
	;;    ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
	;;    ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
	;;    ;; Flex matching
	;;    ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
	;;    ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1)))))))
#+end_src

*** Savehist
Save minibuffer history.

#+begin_src emacs-lisp
  (use-package savehist
    :demand
    :config
    (savehist-mode 1))
#+end_src

*** Vertico
VERTical Interactive COmpletion.
https://github.com/minad/vertico

#+begin_src emacs-lisp
(use-package vertico
  :demand
  :preface
  (defun +/vertico-backward-updir ()
	"Delete char before or go up directory for file cagetory vertico buffers."
	(interactive)
	(let ((metadata (completion-metadata (minibuffer-contents)
   										 minibuffer-completion-table
   										 minibuffer-completion-predicate)))
	  (if (and (eq (char-before) ?/)
   			   (eq (completion-metadata-get metadata 'category) 'file))
   		  (let ((new-path (minibuffer-contents)))
   			(delete-region (minibuffer-prompt-end) (point-max))
   			(insert (abbreviate-file-name
   					 (file-name-directory
   					  (directory-file-name
   					   (expand-file-name new-path))))))
   		(call-interactively 'backward-delete-char))))
  :custom
  (vertico-count 16)
  (vertico-cycle t)  ; Optionally enable cycling for `vertico-next' and `vertico-previous'
  (vertico-resize nil)  ; Grow and shrink the Vertico minibuffer
  ;; (enable-recursive-minibuffers t)  ; Enable recursive minibuffers
  :config
  (vertico-mode 1)
  ;; (setq minibuffer-prompt-properties  ; Do not allow the cursor in the minibuffer prompt
  ;; 		'(read-only t cursor-intangible t face minibuffer-prompt))
  ;; (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  :general
  (vertico-map
   "M-j" #'vertico-next
   "M-S-j" #'vertico-next-group
   "M-k" #'vertico-previous
   "M-S-k" #'vertico-previous-group
   "M-RET" #'vertico-exit-input
   "<backspace>" #'+/vertico-backward-updir)
  (minibuffer-local-map
   "M-h" #'backward-kill-word))
#+end_src

*** Mini Frame
Place minibuffer at the top of the current frame on read-from-minibuffer.
https://github.com/muffinmad/emacs-mini-frame

#+begin_src emacs-lisp :tangle no
(use-package mini-frame
  :hook (after-init . mini-frame-mode)
  :custom
  (mini-frame-show-parameters
   '((top . 50)
     (width . 0.7)
     (left . 0.5)))
  (mini-frame-ignore-commands
   '(eval-expression
	 "edebug-eval-expression"
	 debugger-eval-expression
	 evil-ex
	 "consult"))
  :config ())  ; Show message if verbose is activated
#+end_src

** Mode Line
Contents of the mode line.

#+begin_src emacs-lisp
  ; Non-nil if Column-Number mode is enabled.
  (setq column-number-mode t)
#+end_src

*** Doom Modeline
A fancy and fast mode-line inspired by minimalism design.
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp :tangle no :noweb-ref doom-modeline
  (use-package doom-modeline
    :demand
	:custom
	(doom-modeline-height 16)  ; How tall the mode-line should be
	(doom-modeline-icon t)  ; Whether display icons in the mode-line
	(doom-modeline-indent-info nil)  ; Whether display the indentation information
	:config
    (doom-modeline-mode 1))  ; Show message if verbose is activated
#+end_src
   
* Faces
Support for multiple fonts.

** Basic Faces
The standard faces of Emacs.

#+begin_src emacs-lisp
  ;; (defun +/set-font-faces ()
  ;;   (set-face-attribute 'default nil
  ;; 		  :font "FiraCode Nerd Font"
  ;; 		  :weight 'normal
  ;; 		  :height 120)

  ;;   (set-face-attribute 'fixed-pitch nil
  ;; 		  ;:family "Monospace"
  ;; 		  :font "FiraCode Nerd Font"
  ;; 		  ;:weight 'light
  ;; 		  :height 120)

  ;;   (set-face-attribute 'variable-pitch nil
  ;; 		  ;:family "Monospace"
  ;; 		  :font "Roboto"
  ;; 		  ;:weight 'light
  ;; 		  :height 120
			;; ))

  ; This is needed for the deamon (emacsclient)
  ;; (if (daemonp)
  ;; 	  (add-hook 'after-make-frame-functions ; (Emacs < 27)
  ;; 	  ;(add-hook 'server-after-make-frame-hook
  ;; 		(lambda (frame)
  ;; 		  (with-selected-frame frame
  ;; 			(+/set-font-faces))))
  ;; 	  (+/set-font-faces))
#+end_src

** Doom Themes
Options for doom-themes.
https://github.com/hlissner/emacs-doom-themes

#+begin_src emacs-lisp :tangle no :noweb-ref doom-themes
(use-package doom-themes
  :demand
  :custom
  (doom-themes-enable-bold t)  ; If nil, bold will be disabled across all faces
  (doom-themes-enable-italic t)  ; If nil, italics will be disabled across all faces
  (doom-themes-padded-modeline nil)  ; Default value for padded-modeline setting for themes that support it
  (doom-themes-treemacs-theme "doom-atom")
  :config
  (load-theme 'doom-one t)
  (doom-themes-visual-bell-config)  ; Enable flashing the mode-line on error
  (doom-themes-treemacs-config)  ; Install doom-themes' treemacs configuration
  (doom-themes-org-config))  ; Corrects (and improves) org-mode's native fontification
#+end_src

** Solaired
If only certain buffers could be so grossly incandescent.
https://github.com/hlissner/emacs-solaire-mode

#+begin_src emacs-lisp
(use-package solaire-mode
  :ghook ('after-init-hook #'solaire-global-mode)
  :gfhook ('(dashboard-mode-hook) #'(lambda () (solaire-mode 0)))  ; Disable for some modes
  :config ())  ; Show message if verbose is activated
#+end_src
   
** Highlight Indent Guides
Minor mode to highlight indentation
https://github.com/DarthFennec/highlight-indent-guides

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)

(use-package highlight-indent-guides
  :hook ((prog-mode
		  text-mode
		  conf-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-suppress-auto-error t)
  (highlight-indent-guides-character 9474)  ; | 124  ⇥ 8677  ⇨ 8680  ↦ 8614    default 9474
  (highlight-indent-guides-method 'character)  ; Method to use when displaying indent guides
  (highlight-indent-guides-responsive 'stack)
  (highlight-indent-guides-auto-enabled t)
;; Highlight Indent Guides Character Face
;; Foreground: #3e6a44a85124
;; Highlight Indent Guides Even Face
;; Background: #3e6a44a85124
;; Highlight Indent Guides Odd Face
;; Background: #3349386a42ac
;; Highlight Indent Guides Stack Character Face
;; Foreground: #54ad5d256e14
;; Highlight Indent Guides Stack Even Face
;; Background: #54ad5d256e14
;; Highlight Indent Guides Stack Odd Face
;; Background: #498c50e65f9c
;; Highlight Indent Guides Top Character Face
;; Foreground: #6af075a18b04
;; Highlight Indent Guides Top Even Face
;; Background: #6af075a18b04
;; Highlight Indent Guides Top Odd Face
;; Background: #5fce69637c8c
  :config
  (defun +indent-guides-init-faces-h (&rest _)
    (when (display-graphic-p)
      (highlight-indent-guides-auto-set-faces)))

  ;; HACK `highlight-indent-guides' calculates its faces from the current theme,
  ;;      but is unable to do so properly in terminal Emacs, where it only has
  ;;      access to 256 colors. So if the user uses a daemon we must wait for
  ;;      the first graphical frame to be available to do.
  (add-hook 'doom-load-theme-hook #'+indent-guides-init-faces-h)
  (when doom-theme
    (+indent-guides-init-faces-h))

  ;; `highlight-indent-guides' breaks when `org-indent-mode' is active
  (+/add-hook 'org-mode-local-vars-hook
    (defun +indent-guides-disable-maybe-h ()
      (and highlight-indent-guides-mode
           (bound-and-true-p org-indent-mode)
           (highlight-indent-guides-mode -1)))))
#+end_src

** Prettify Symbols

#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)  ; Toggle Prettify-Symbols mode in all buffers
(setq prettify-symbols-alist '(("lambda" . 955)))
#+end_src

** Ligature
Typographic Ligatures in Emacs.
https://github.com/mickeynp/ligature.el

#+begin_src emacs-lisp
(use-package ligature
  :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
  :ghook ('after-init-hook #'global-ligature-mode)
  :custom
  (ligature-ignored-major-modes '(minibuffer-inactive-mode dashboard-mode))
  (ligature-mode-set-explicitly t)
  :config
  (ligature-set-ligatures 't '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "\\\\"
                               ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                               "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                               "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                               "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                               "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                               "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                               "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                               ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                               "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                               "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "?:" "://"
                               "?=" "?." "??" ";;" "/*" "/=" "/>" "__" "~~" "(*" "*)" "||>"
							   ;; "++" "//"  ; Trouble maker
							   )))
#+end_src
 
** Unicode Fonts
Configure Unicode fonts
http://github.com/rolandwalker/unicode-fonts

#+begin_src emacs-lisp
(setq byte-compile-warnings '(cl-functions))  ; Disable "Package cl is deprecated" message

(use-package unicode-fonts
  :demand
  :config
  (unicode-fonts-setup))
#+end_src

* Help
Support for Emacs help systems.

** Rainbow Mode
Show color strings with a background color.
https://github.com/emacsmirror/rainbow-mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ghook '(conf-mode-hook prog-mode-hook text-mode-hook)
  :config ())  ; Show message if verbose is activated
#+end_src

** Helpful
A better *help* buffer
https://github.com/Wilfred/helpful

#+begin_src emacs-lisp
(use-package helpful
  :general
  (my-leader-def
	"h f" #'helpful-callable
	"h F" #'helpful-function
	"h o" #'helpful-symbol
	"h v" #'helpful-variable
	"h c" #'helpful-command
	"h i" #'info
	"h r" '(info-emacs-manual :which-key "Emacs Manual")
	"h O" '((lambda () (interactive) (info "org")) :which-key "Org Manual")
	"h R" '((lambda () (interactive) (info "elisp")) :which-key "Org Manual")
	"h k" #'helpful-key)
  :config ())  ; Show message if verbose is activated
#+end_src

** Which Key 
Display available keybindings in popup
https://github.com/justbur/emacs-which-key

#+begin_src emacs-lisp
(use-package which-key
  :hook (after-init . which-key-mode)
  :custom
  (which-key-idle-delay 0.4)
  :config ())  ; Show message if verbose is activated
#+end_src

* Multimedia
Non-textual support, specifically images and sound.

* Local
Code local to your site.

** Library

#+begin_src emacs-lisp :tangle no :noweb-ref library
(defun +/display-startup-time ()
  "Show the duration of emacs startup"
  (let ((package-count 0) (time (emacs-init-time)))
    (when (bound-and-true-p package-alist)
  (setq package-count (length package-activated-list)))
    (when (boundp 'straight--profile-cache)
  (setq package-count (+ (hash-table-size straight--profile-cache) package-count)))
    (if (zerop package-count)
	(message "Emacs started in %.4s with %d garbage collections"
		 time gcs-done)
  (message "%d packages loaded in %.4s with %d garbage collections"
	   package-count time gcs-done))))

(defun +/unquote (exp)
  "Return EXP unquoted."
  (declare (pure t) (side-effect-free t))
  (while (memq (car-safe exp) '(quote function))
    (setq exp (cadr exp)))
  exp)

(defun +/enlist (exp)
  "Return EXP wrapped in a list, or as-is if already a list."
  (declare (pure t) (side-effect-free t))
  (if (listp exp) exp (list exp)))

(defun +/resolve-hook-forms (hooks)
  "Converts a list of modes into a list of hook symbols.

If a mode is quoted, it is left as is. If the entire HOOKS list is quoted, the
list is returned as-is."
  (declare (pure t) (side-effect-free t))
  (let ((hook-list (+/enlist (+/unquote hooks))))
    (if (eq (car-safe hooks) 'quote)
	hook-list
  (cl-loop for hook in hook-list
	   if (eq (car-safe hook) 'quote)
	   collect (cadr hook)
	   else collect (intern (format "%s-hook" (symbol-name hook)))))))

(defmacro +/add-hook (hooks &rest rest)
  "A convenience macro for adding N functions to M hooks.

This macro accepts, in order:

  1. The mode(s) or hook(s) to add to. This is either an unquoted mode, an
     unquoted list of modes, a quoted hook variable or a quoted list of hook
     variables.
  2. Optional properties :local, :append, and/or :depth [N], which will make the
     hook buffer-local or append to the list of hooks (respectively),
  3. The function(s) to be added: this can be one function, a quoted list
     thereof, a list of `defun's, or body forms (implicitly wrapped in a
     lambda).

\(fn HOOKS [:append :local] FUNCTIONS)"
  (declare (indent (lambda (indent-point state)
		     (goto-char indent-point)
		     (when (looking-at-p "\\s-*(")
		   (lisp-indent-defform state indent-point))))
	   (debug t))
  (let* ((hook-forms (+/resolve-hook-forms hooks))
	 (func-forms ())
	 (defn-forms ())
	 append-p
	 local-p
	 remove-p
	 depth
	 forms)
    (while (keywordp (car rest))
  (pcase (pop rest)
	(:append (setq append-p t))
	(:depth  (setq depth (pop rest)))
	(:local  (setq local-p t))
	(:remove (setq remove-p t))))
    (let ((first (car-safe (car rest))))
  (cond ((null first)
	     (setq func-forms rest))

	    ((eq first 'defun)
	     (setq func-forms (mapcar #'cadr rest)
		   defn-forms rest))

	    ((memq first '(quote function))
	     (setq func-forms
		   (if (cdr rest)
		   (mapcar #'+/unquote rest)
		     (+/enlist (+/unquote (car rest))))))

	    ((setq func-forms (list `(lambda (&rest _) ,@rest)))))
  (dolist (hook hook-forms)
	(dolist (func func-forms)
	  (push (if remove-p
		    `(remove-hook ',hook #',func ,local-p)
		  `(add-hook ',hook #',func ,(or depth append-p) ,local-p))
		forms)))
  (macroexp-progn
   (append defn-forms
	   (if append-p
		   (nreverse forms)
		 forms))))))
#+end_src

** TODO
- svg-tags
- Repair dashboard width
- agressive-indent-mode
- org-download
- nov.el
- show-css package
- web-beautify
- xah-css-mode
- counsel-css
- winum
- Markdown mode
- https://github.com/rocky/emacs-loc-changes
- company emoji
https://github.com/tarsius/keycast
