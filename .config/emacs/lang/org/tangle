# -*- mode: org -*- #
:PROPERTIES:
:header-args+: :tangle config
:header-args+: :noweb strip-export
:END:

Outline-based notes management and organizer.
https://orgmode.org

#+begin_src emacs-lisp
(use-package org :straight (:type built-in)
	;:gfhook
	;; #'variable-pitch-mode ;; #'auto-fill-mode ;; #'turn-on-auto-fill
	:config
	<<org-conf>>
	;; (setq system-time-locale "C") 
	:custom
	(org-support-shift-select 'always)
	(org-modules '(ol-w3m ol-bbdb ol-bibtex ol-docview ol-gnus ol-info ol-irc ol-eww
		   org-habit org-bookmark org-eshell org-tempo))
  ;; org-toc
	:general
	(:keymaps 'org-capture-mode-map
		  [remap evil-save-and-close]          'org-capture-finalize
		  [remap evil-save-modified-and-close] 'org-capture-finalize
		  [remap evil-quit]                    'org-capture-kill)
	(:states 'normal :keymaps 'org-mode-map
		 "M-j" #'org-next-visible-heading
		 "M-k" #'org-previous-visible-heading
		 "C-j" #'org-metadown
		 "C-'" #'org-edit-special
		 "M-/" '(consult-org-heading :package consult)

		 "C-k" #'org-metaup)

	(:states 'normal :keymaps 'org-src-mode-map
		 "C-'" "C-c '")
	(leader-def :keymaps 'org-mode-map
	  "o" '(:ignore t :which-key "org")
	  "o d" #'(org-babel-demarcate-block :wk "demarcate block")
	  "o c" #'(org-capture :wk "capture")
	  "o ;" #'(org-toggle-comment :wk "toggle comment")
	  "o :" #'(org-toggle-link-display :wk "toggle link display")
	  "o f" #'(org-switchb :wk "switch to agenda file")
	  ;; "o t" #'(org-todo :wk "todo")
	  "o l" #'(org-store-link :wk "store link"))
)
#+end_src

**** Config
:PROPERTIES:
:header-args:     :tangle no :noweb-ref org-conf
:END:

***** Appearance
Settings for Org mode appearance.

#+begin_src emacs-lisp
(setq
 org-hide-leading-stars t  ; Non-nil means hide the first N-1 stars in a headline
 org-image-actual-width 300
 org-src-fontify-natively t
 org-hide-emphasis-markers nil
 org-ellipsis " ↴"  ; The ellipsis to use in the Org mode outline (▾  ↴)
 )
#+end_src

****** Org Faces
Faces in Org mode

#+begin_src emacs-lisp
(setq org-fontify-quote-and-verse-blocks t)

;; (dolist (face 
;;   '((org-level-1 . 1.2)
;; 	(org-level-2 . 1.18)
;; 	(org-level-3 . 1.16)
;; 	(org-level-4 . 1.14)
;; 	(org-level-5 . 1.12)
;; 	(org-level-6 . 1.1)
;; 	(org-level-7 . 1.1)
;; 	(org-level-8 . 1.1)))
;;   (set-face-attribute (car face) nil
;; 	   :font "Ubuntu"
;; 	   :weight 'medium
;; 	   :height (cdr face)))

;(set-face-attribute 'org-document-title nil :font "FiraCode Nerd Font" :weight 'bold :height 1.3)

; Ensure that anything that should be fixed-pitch in Org files appears that way
; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
; (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
; (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

; ; Get rid of the background on column views
; (set-face-attribute 'org-column nil :background nil)
; (set-face-attribute 'org-column-title nil :background nil)
; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-property-value ((t (:inherit fixed-pitch))) t)
; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

***** Babel
Code block evaluation and management in ‘org-mode’ documents.

#+begin_src emacs-lisp
  ;  (org-babel-do-load-languages
  ;	'org-babel-load-languages
  ;	'((emacs-lisp . t)
  ;	  (ledger . t)))

  ;(defun org-babel-tangle-block()
  ;  (interactive)
  ;  (let ((current-prefix-arg '(4)))
  ;    (call-interactively 'org-babel-tangle)
  ;))

  ; Conf files highlit
;(push '("conf-unix" . conf-unix) org-src-lang-modes)

; Confirm before evaluation
(setq org-confirm-babel-evaluate nil
   org-src-tab-acts-natively t)

; Local Variables:
; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
; End:
;; (add-to-list 'safe-local-variable-values
      ;; '(eval add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t))
#+end_src

****** Tangle

#+begin_src emacs-lisp
(setq
 org-babel-tangle-use-relative-file-links nil
 org-babel-tangle-lang-exts '(("vala" . "vala")
			      ("ruby" . "rb")
			      ("python" . "py")
			      ("picolisp" . "l")
			      ("ocaml" . "ml")
			      ("maxima" . "max")
			      ("lua" . "lua")
			      ("lisp" . "lisp")
			      ("LilyPond" . "ly")
			      ("latex" . "tex")
			      ("java" . "java")
			      ("haskell" . "hs")
			      ("groovy" . "groovy")
			      ("clojurescript" . "cljs")
			      ("clojure" . "clj")
			      ("D" . "d")
			      ("C++" . "cpp")
			      ("emacs-lisp" . "el")
			      ("elisp" . "el"))
)
#+end_src

***** Export
Options for exporting Org mode files.

#+begin_src emacs-lisp
(setq org-export-backends '(ascii html icalendar latex man md odt org))
#+end_src

****** Org Export ODT
Options for exporting Org mode files to ODT.

#+begin_src emacs-lisp
(setq org-odt-preferred-output-format "pdf")  ; Require LibreOffice (docx)
(setq org-odt-category-map-alist
      '(("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p)))
#+end_src

****** Org Export General
General options for export engine.

#+begin_src emacs-lisp
(setq org-export-in-background t
   org-export-with-toc nil)
#+end_src

***** Indent
Options concerning dynamic virtual outline indentation.

***** Structure
Options concerning the general structure of Org files.

****** Cycle
Options concerning visibility cycling in Org mode.

#+begin_src emacs-lisp
(setq org-cycle-separator-lines 2)
#+end_src

****** Edit Structure
Options concerning structure editing in Org mode.

#+begin_src emacs-lisp
(setq
 org-edit-src-content-indentation 0
 org-src-window-setup 'current-window
 org-src-preserve-indentation nil
 org-src-lang-modes '(("C" . c)
		     ("C++" . c++)
		     ("asymptote" . asy)
		     ("bash" . sh)
		     ("beamer" . latex)
		     ("calc" . fundamental)
		     ("cpp" . c++)
		     ("ditaa" . artist)
		     ("dot" . fundamental)
		     ("elisp" . emacs-lisp)
		     ("ocaml" . tuareg)
		     ("screen" . shell-script)
		     ("shell" . sh)
		     ("gdscript" . gdscript)
		     ("vimrc" . vimrc)
		     ("yaml" . yaml)
		     ("opml" . nxml)
		     ("sqlite" . sql))
)

;; (require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

***** Properties
Options concerning properties in Org mode.

#+begin_src emacs-lisp
(setq org-use-property-inheritance t)
#+end_src

***** Tags
Options concerning tags in Org mode.

#+begin_src emacs-lisp
;; (org-align-all-tags)
(setq org-tags-column (- 68 (window-body-width)))
#+end_src

***** COMMENT Todo 
Options concerning TODO items in Org mode.

#+begin_src emacs-lisp
(setq
org-log-done 'time
org-log-into-drawer t
org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)"))
;; "TODO" "NEXT" "HOLD(h)" "DONE"
;; "TODO" "NEXT" "WAIT(w@/!)" "DONE"
)

; Refile
(setq org-refile-targets '((nil :maxlevel . 1)
                           (org-agenda-files :maxlevel . 1)))

; (setq org-refile-targets
      ;; '(("Archive.org" :maxlevel . 1)))

(advice-add 'org-refile :after 'org-save-all-org-buffers)  ; Save Org buffers after refiling!

; Templates
(setq org-capture-templates
  `(("t" "Tasks / Projects")
    ("tt" "Task" entry (file+olp "/mnt/files/Ricardo/Documents/notes/task.org" "Inbox")
         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
    ;; ("ts" "Clocked Entry Subtask" entry (clock)
    ;;      "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

    ("j" "Journal Entries")
    ("jj" "Journal" entry
         (file+olp+datetree "/mnt/files/Ricardo/Documents/notes/journal.org")
         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
         ;; ,(dw/read-file-as-string "~/notes/Templates/Daily.org")
         :clock-in :clock-resume
         :empty-lines 1)
 ho
    ("jm" "Meeting" entry
         (file+olp+datetree "/mnt/files/Ricardo/Documents/notes/journal.org")
         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)

    ;; ("w" "Workflows")
    ;; ("we" "Checking Email" entry (file+olp+datetree ,(dw/get-todays-journal-file-name))
    ;;      "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

    ("m" "Metrics Capture")
    ("mw" "Weight" table-line (file+headline "/mnt/files/Ricardo/Documents/notes/metrics.org" "Weight")
     "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

;; (setq org-capture-templates
;;        '(("t" "todo" entry (file org-default-notes-file)
;; 	  "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
;; 	 ("m" "Meeting" entry (file org-default-notes-file)
;; 	  "* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
;; 	 ("d" "Diary" entry (file+datetree "~/org/diary.org")
;; 	  "* %?\n%U\n" :clock-in t :clock-resume t)
;; 	 ("i" "Idea" entry (file org-default-notes-file)
;; 	  "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
;; 	 ("n" "Next Task" entry (file+headline org-default-notes-file "Tasks")
;; 	  "** NEXT %? \nDEADLINE: %t") ))

;; (define-key global-map (kbd "C-c j")
;;   (lambda () (interactive) (org-capture nil "j")))

;; (require 'org-habit)
;; (add-to-list 'org-modules 'org-habit)
;; (setq org-habit-graph-column 60)
#+end_src

***** Startup

#+begin_src emacs-lisp
(setq
org-startup-align-all-tables t  ; Non-nil means align all tables when visiting a file
org-startup-truncated nil  ; Non-nil means entering Org mode will set truncate-lines
org-startup-with-inline-images t
org-startup-folded t  ; Non-nil means entering Org mode will switch to OVERVIEW
org-hide-block-startup nil
org-startup-indented nil  ; Non-nil means turn on org-indent-mode on startup
org-latex-create-formula-image-program 'dvipng
)  

;; (setq org-clock-persist 'history)
;; (org-clock-persistence-insinuate)
#+end_src

