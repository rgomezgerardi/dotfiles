# -*- org -*- #
:PROPERTIES:
:id: zsh
:author: Ricardo Gomez
:email:  rgomezgerardi@gmail.com
:title:  Zsh Custom Configuration 
:header-args+: :noweb strip-export
:header-args+: :cache yes
:END:

* Runcom
:PROPERTIES:
:header-args:     :tangle .zshrc :shebang "#!/bin/zsh"
:END:
Run Commands

** Source

#+begin_src zsh
source "$ZDOTDIR/.zshalias" 
#+end_src

** History

#+begin_src zsh
[[ -d "$XDG_CACHE_HOME/zsh"  ]] || mkdir -p "$XDG_CACHE_HOME/zsh"

setopt APPEND_HISTORY
setopt BANG_HIST              # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY       # Write the history file in the ':start:elapsed;command' format.
setopt INC_APPEND_HISTORY     # Write to the history file immediately, not when the shell exits.
setopt HIST_EXPIRE_DUPS_FIRST # Expire a duplicate event first when trimming history.
setopt HIST_IGNORE_DUPS       # Do not record an event that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS   # Delete an old recorded event if a new event is a duplicate.
setopt HIST_FIND_NO_DUPS      # Do not display a previously found event.
setopt HIST_IGNORE_SPACE      # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS      # Do not write a duplicate event to the history file.
setopt HIST_VERIFY            # Do not execute immediately upon history expansion.
setopt HIST_BEEP              # Beep when accessing non-existent history.
setopt SHARE_HISTORY

export ZCACHEDIR="$XDG_CACHE_HOME/zsh"
export HISTFILE="$ZCACHEDIR/histfile"
export HISTSIZE=10000
export SAVEHIST=10000

# Lists the ten most used commands.
alias history-stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"
#+end_src

** COMMENT Completion

#+begin_src zsh
# Folder
_zcompdump="$XDG_CACHE_HOME/zsh/compdump"
_zcompcache="$XDG_CACHE_HOME/zsh/compcache"

# Options
setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
setopt AUTO_MENU           # Show completion menu on a successive tab press.
setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
setopt EXTENDED_GLOB       # Needed for file modification glob modifiers with compinit
unsetopt MENU_COMPLETE     # Do not autoselect the first completion entry.
unsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.

# Styles
# Use caching to make completion for commands such as dpkg and apt usable.
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "$_zcompcache"
# zstyle ':completion:*' menu select
# zstyle ':completion::complete:lsof:*' menu yes select
# Use case-insensitive and partial completion
# zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
# setopt no_list_ambiguous
# zstyle ":completion:*:descriptions" format "%B%d%b"

# Init
# Initialize completion styles. Users can set their preferred completion style by
# calling `compstyle <compstyle>` in their .zshrc, or by defining their own
# `compstyle_<name>_setup` functions similar to the zsh prompt system.
fpath+="${0:A:h}/functions"
autoload -Uz compstyleinit && compstyleinit

# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
_comp_files=($_zcompdump(Nmh-20))
if (( $#_comp_files )); then
  compinit -i -C -d "$_zcompdump"
else
  compinit -i -d "$_zcompdump"
  # Keep $_zcompdump younger than cache time even if it isn't regenerated.
  touch "$_zcompdump"
fi
# zmodload zsh/complist
# _comp_options+=(globdots)		# Include hidden files.

# Cleanup
unset _comp_files _zcompdump _zcompcache
#+end_src

** Zinit

#+begin_src zsh
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zsh/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"
source "$ZDOTDIR/.zplugin"
#+end_src

** SSH Agent

#+begin_src shell
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    ssh-agent -t 1h > "$XDG_RUNTIME_DIR/ssh-agent.env"
fi
if [[ ! -f "$SSH_AUTH_SOCK" ]]; then
    source "$XDG_RUNTIME_DIR/ssh-agent.env" >/dev/null
fi
#+end_src

** COMMENT Antidote

#+begin_src zsh
mkdir -p "$ZDOTDIR/plugin"

if [ -d "$ZDOTDIR/antidote" ] ; then
    (git -C "$ZDOTDIR/antidote" pull --quiet https://github.com/mattmc3/antidote.git &)
else
    git clone --depth=1 https://github.com/mattmc3/antidote.git $ZDOTDIR/antidote && clear
fi

source $ZDOTDIR/antidote/antidote.zsh
antidote load $ZDOTDIR/.zplugin
#+end_src

** COMMENT other
#+begin_src zsh
# # Source
# # [ -f "$XDG_CONFIG_HOME/zsh/.zshalias" ] && source "$XDG_CONFIG_HOME/zsh/.zshalias"
# source "$ZDOTDIR/.zshprompt" 

# # source "zsh-exports"
# # source "zsh-vim-mode"
# # source "zsh-aliases"
# # source "zsh-prompt"

# # Add custom funtions completion
# fpath+="$ZDOTDIR/completion/"

# # If not running interactively, don't do anything
# [[ $- != *i* ]] && return

# # Enable colors
# autoload -Uz colors && colors



# # Expand Global Alias
# globalias() {
#    if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
#      zle _expand_alias
#      zle expand-word
#    fi
#    zle self-insert
# }
# zle -N globalias
# bindkey " " globalias
# bindkey "^ " magic-space           # control-space to bypass completion
# bindkey -M isearch " " magic-space # normal space during searches


# # some useful options (man zshoptions)
# setopt autocd  # Automatically cd into directories by just typing the directory name
# setopt autopushd # Keep a directory stack of all the directories you cd to in a session
# setopt pushdignoredups  # Use Git-like -N instead of the default +N
# setopt autocd extendedglob nomatch menucomplete notify

# setopt interactive_comments
# stty stop undef		# Disable ctrl-s to freeze terminal.
# zle_highlight=('paste:none')

# # beeping is annoying
# # unsetopt BEEP

# autoload -U up-line-or-beginning-search
# autoload -U down-line-or-beginning-search
# zle -N up-line-or-beginning-search
# zle -N down-line-or-beginning-search

# # FZF 
# # TODO update for mac
# [ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
# [ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
# [ -f /usr/share/doc/fzf/examples/completion.zsh ] && source /usr/share/doc/fzf/examples/completion.zsh
# [ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] && source /usr/share/doc/fzf/examples/key-bindings.zsh
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# # export FZF_DEFAULT_COMMAND='rg --hidden -l ""'

# # Speedy keys
# xset r rate 210 60

# # zsh parameter completion for the dotnet CLI

# _dotnet_zsh_complete()
# {
#   local completions=("$(dotnet complete "$words")")

#   reply=( "${(ps:\n:)completions}" )
# }

# compctl -K _dotnet_zsh_complete dotnet


# For QT Themes
#export QT_QPA_PLATFORMTHEME=qt5ct

#eval "$(zoxide init zsh)"
#+end_src

** COMMENT Key-bindings

#+begin_src shell
# bindkey -s '^o' 'ranger^M'
# bindkey -s '^f' 'zi^M'
# bindkey -s '^s' 'ncdu^M'
# bindkey -s '^n' 'nvim $(fzf)^M'
# bindkey -s '^v' 'nvim\n'
# bindkey -s '^z' 'zi^M'
# bindkey '^[[P' delete-char
# bindkey "^p" up-line-or-beginning-search # Up
# bindkey "^n" down-line-or-beginning-search # Down
# bindkey "^k" up-line-or-beginning-search # Up
# bindkey "^j" down-line-or-beginning-search # Down
# bindkey -r "^u"
# bindkey -r "^d"
#+end_src

** COMMENT Vi

#+begin_src shell
# vi mode
bindkey -v
export KEYTIMEOUT=1

# Yank and Paste to the system clipboard
function x11-clip-wrap-widgets() {
    # NB: Assume we are the first wrapper and that we only wrap native widgets
    # See zsh-autosuggestions.zsh for a more generic and more robust wrapper
    local copy_or_paste=$1
    shift

    for widget in $@; do
        # Ugh, zsh doesn't have closures
        if [[ $copy_or_paste == "copy" ]]; then
            eval "
            function _x11-clip-wrapped-$widget() {
                zle .$widget
                xclip -in -selection clipboard <<<\$CUTBUFFER
            }
            "
        else
            eval "
            function _x11-clip-wrapped-$widget() {
                CUTBUFFER=\$(xclip -out -selection clipboard)
                zle .$widget
            }
            "
        fi

        zle -N $widget _x11-clip-wrapped-$widget
    done
}

local copy_widgets=(
    vi-yank vi-yank-eol vi-delete vi-backward-kill-word vi-change-whole-line
)
local paste_widgets=(
    vi-put-{before,after}
)

# NB: can atm. only wrap native widgets
x11-clip-wrap-widgets copy $copy_widgets
x11-clip-wrap-widgets paste  $paste_widgets

# Use vim keys in tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Jump to beginning using H and the end using L in NORMAL mode
bindkey -M vicmd 'g' beginning-of-line
bindkey -M vicmd 'G' end-of-line

# Change cursor shape for different vi modes
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select

zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
	#zle-keymap-select 'beam'  # Start with beam shape cursor on zsh startup and after every command.
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.



zle-line-init() { }
## Use vifm to switch directories and bind it to ctrl-o
#vifmcd () {
#    tmp="$(mktemp)"
#    vifm --choose-dir="$tmp" "$@"
#    if [ -f "$tmp" ]; then
#        dir="$(cat "$tmp")"
#        rm -f "$tmp"
#        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
#    fi
#}
#bindkey -s '^o' 'vifmcd\n'

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# bindkey -e will be emacs mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect '^h' vi-backward-char
bindkey -M menuselect '^k' vi-up-line-or-history
bindkey -M menuselect '^l' vi-forward-char
bindkey -M menuselect '^j' vi-down-line-or-history
bindkey -M menuselect '^[[Z' vi-up-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.
#+end_src

* Plugin
:PROPERTIES:
:header-args:     :tangle .zplugin :shebang "#!/bin/zsh"
:END:

** COMMENT Pure
Pretty, minimal and fast ZSH prompt
https://github.com/sindresorhus/pure

#+begin_src zsh
# Load the pure theme, with zsh-async library that's bundled with it.
zi ice pick"async.zsh" src"pure.zsh"
zi light sindresorhus/pure
clear
#+end_src

** Powerleve10k
Powerlevel10k is a theme for Zsh. It emphasizes speed, flexibility and out-of-the-box experience.
https://github.com/romkatv/powerlevel10k

#+begin_src zsh
# Load powerlevel10k theme
zinit ice depth"1" # git clone depth
zinit light romkatv/powerlevel10k

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
[[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh
#+end_src

** Abbr
zsh-abbr is the zsh manager for auto-expanding abbreviations
https://github.com/olets/zsh-abbr

#+begin_src zsh
zinit light olets/zsh-abbr
abbr import-aliases --quieter --force
#+end_src

** COMMENT History Substring Search
This is a clean-room implementation of the Fish shell's history search feature
https://github.com/zsh-users/zsh-history-substring-search

#+begin_src zsh
zinit light zdharma-continuum/zsh-history-substring-search
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
#+end_src

** History Search Multi Word
Binds Ctrl-R to a widget that searches for multiple keywords in an AND fashion.
https://github.com/zdharma-continuum/history-search-multi-word

#+begin_src zsh
zinit light zdharma-continuum/history-search-multi-word
#+end_src

** Syntax Highlighting
Feature rich syntax highlighting for Zsh.
https://github.com/zdharma-continuum/fast-syntax-highlighting

#+begin_src zsh
zi wait lucid light-mode for atinit"zicompinit; zicdreplay" zdharma-continuum/fast-syntax-highlighting
#+end_src

** Autosuggestion
Fish-like fast/unobtrusive autosuggestions for zsh.
https://github.com/zsh-users/zsh-autosuggestions

#+begin_src zsh
zi wait lucid light-mode for atload"_zsh_autosuggest_start" zsh-users/zsh-autosuggestions
#+end_src

** Completion
A minimal, opinionated set of ZSH plugins designed to be small, simple, and focused.
https://github.com/belak/zsh-utils

#+begin_src zsh
zinit light belak/zsh-utils
#+end_src

** Completions
Additional completion definitions for Zsh.
https://github.com/zsh-users/zsh-completions

#+begin_src zsh
zi wait lucid light-mode for blockf atpull'zinit creinstall -q .' zsh-users/zsh-completions
#+end_src

* Aliases  
:PROPERTIES:
:header-args:     :tangle .zshalias :shebang "#!/bin/zsh"
:END:

** Global

#+begin_src shell
alias -g bg="> /dev/null 2>&1 &"
#+end_src

** Suffix

#+begin_src shell
alias -s txt="$EDITOR"
alias -s {jpg,png,bmp}="$IMAGE_VIEWER"
alias -s {md,tex,py}="$VISUAL"
#+end_src

** Simple
*** COMMENT Color Support
	
#+begin_src shell
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	alias ls='ls --color=auto'
	alias dir='dir --color=auto'
	alias vdir='vdir --color=auto'
	alias grep='grep --color=auto'
	alias egrep='egrep --color=auto'
	alias fgrep='fgrep --color=auto'
fi
#+end_src

*** COMMENT Flags

#+begin_src shell
alias cp="cp --interactive --verbose"
alias mv="mv --interactive --verbose"
alias rm="rm --verbose"
alias df='df --human-readable'
alias lsblk="lsblk --fs"
alias umount="umount --verbose --recursive --force"
alias free="free --mebi --total"
alias wget="wget --continue"
alias rsync="rsync --human-readable --progress --verbose"
alias ffmpeg='ffmpeg -hide_banner -y'
alias mpv="mpv --player-operation-mode=pseudo-gui"
alias rg="rg --sort path"
#+end_src

*** COMMENT Package Manager
**** Arch

#+begin_src shell
alias pacman="sudo pacman --color auto"
alias upgrade='sudo pacman -Syyu'
# alias install='sudo pacman -Syu && sudo pacman -Syu'
alias refresh='sudo pacman -Syy'
# alias remove='sudo pacman -Rsn'
alias pacsyu='sudo pacman -Syyu'			# Update only standard pkgs
alias yaysua='yay -Sua --noconfirm'			# Update only AUR pkgs
alias yaysyu='yay -Syu --noconfirm'			# Update standard pkgs and AUR pkgs
alias unlock='sudo rm /var/lib/pacman/db.lck'
alias rmpacmanlock="sudo rm /var/lib/pacman/db.lck"
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'	# Remove orphaned packages
#alias mirror1='sudo reflector --verbose --latest 30 --sort rate --save /etc/pacman.d/mirrorlist'
alias mirror1='sudo reflector --verbose --fastest 20 --latest 20 --number 20 --sort rate --save /etc/pacman.d/mirror'
alias mirror2='sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirror'	# Get fastest mirrors
alias mirror3='sudo pacman-mirrors -g'
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 30 --number 10 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 30 --number 10 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 30 --number 10 --sort age --save /etc/pacman.d/mirrorlist"
#our experimental - best option for the moment
alias mirrorx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 5 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"
alias mirrorxx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 20 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"

alias ram='rate-mirrors --allow-root arch | sudo tee /etc/pacman.d/mirrorlist'
# paru as aur helper - updates everything
alias pksyua="paru -Syu --noconfirm"
alias upall="paru -Syu --noconfirm"

#Cleanup orphaned packages
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'

#skip integrity check
alias paruskip='paru -S --mflags --skipinteg'
alias yayskip='yay -S --mflags --skipinteg'
alias trizenskip='trizen -S --skipinteg'

#Recent Installed Packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"
alias riplong="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -3000 | nl"

# For when keys break
alias archlinx-fix-keys="sudo pacman-key --init && sudo pacman-key --populate archlinux && sudo pacman-key --refresh-keys"
#+end_src

*** COMMENT Navigation

#+begin_src shell
alias ..='cd ..' 
alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../..'
alias .5='cd ../../../..'
alias .6='cd ../../../../..'

alias la='ls -a'
alias ll='ls -al'
alias l.="ls -A | egrep '^\.'"
#+end_src

*** COMMENT Git

#+begin_src shell
alias dotfiles='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias rmgitcache="rm -r ~/.cache/git"
# alias m="git checkout main"
# alias s="git checkout stable"
#+end_src

*** COMMENT System Info

#+begin_src shell
alias userlist="cut -d: -f1 /etc/passwd"
alias workspaces='prop -root _NET_DESKTOP_NAMES'
alias desktops="ls /usr/share/xsessions"
alias monitors="xrandr -q"

alias whichvga="arcolinux-which-vga"
alias probe="sudo -E hw-probe -all -upload"
alias hw="hwinfo --short"
alias microcode='grep . /sys/devices/system/cpu/vulnerabilities/*'

#ps
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias psmem='ps auxf | sort -nr -k 4 | head -5'
alias pscpu='ps auxf | sort -nr -k 3 | head -5'

# systmectl
alias sysfailed="systemctl list-units --failed"
alias syslistenabled="systemctl list-unit-files --state=enabled"
#+end_src

*** COMMENT Mount and Umount Devices

#+begin_src shell
alias mount-iso='sudo mount -o loop --target /mnt/iso --source'
alias mount-usb='sudo mount -o loop --target /mnt/usb --source /dev/sdb'
alias mount-dvd='sudo mount -o ro,loop --target /mnt/dvd --source /dev/sr0'
alias mount-phone="aft-mtp-mount $PHONE"

alias umount-iso='sudo umount /mnt/iso'
alias umount-usb='udiskie-umount /mnt/PENDRIVE'
alias umount-dvd='sudo umount /mnt/dvd'
alias umount-phone="fusermount -u $PHONE"
#+end_src

*** COMMENT Youtube-DL

#+begin_src shell
alias yt='youtube-dl'
alias yta='yt --extract-audio --audio-format mp3 --audio-quality 192k'
alias yta-aac="yt --extract-audio --audio-format aac "
alias yta-best="yt --extract-audio --audio-format best "
alias yta-flac="yt --extract-audio --audio-format flac "
alias yta-m4a="yt --extract-audio --audio-format m4a "
alias yta-mp3="yt --extract-audio --audio-format mp3 "
alias yta-opus="yt --extract-audio --audio-format opus "
alias yta-vorbis="yt --extract-audio --audio-format vorbis "
alias yta-wav="yt --extract-audio --audio-format wav "
alias ytv="yt --format 'best[ext = mp4][height <= 480]'"
alias ytv-best="yt --format bestvideo+bestaudio "
#+end_src

*** COMMENT Security

#+begin_src shell
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
alias gpg-check-fix="gpg2 --keyserver-options auto-key-retrieve --verify"
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"
alias fix-keyserver="[ -d ~/.gnupg ] || mkdir ~/.gnupg ; cp /etc/pacman.d/gnupg/gpg.conf ~/.gnupg/ ; echo 'done'"
#+end_src

*** COMMENT Maintenance

#+begin_src shell
alias jctl='journalctl -p 3 -xb'
alias big="expac -H M '%m\t%n' | sort -h | nl"
alias downgrada="sudo downgrade --ala-url https://ant.seedhost.eu/arcolinux/"
alias unhblock="hblock -S none -D none"
alias update-fc='sudo fc-cache -fv'

#fixes
alias fix-permissions="sudo chown -R $USER:$USER ~/.config ~/.local"
alias keyfix="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias key-fix="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fixkey="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fix-key="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fix-sddm-config="/usr/local/bin/arcolinux-fix-sddm-config"
alias fix-pacman-conf="/usr/local/bin/arcolinux-fix-pacman-conf"
alias fix-pacman-keyserver="/usr/local/bin/arcolinux-fix-pacman-gpg-conf"
#+end_src

*** COMMENT Program

#+begin_src shell
# alias emacs="~/.local/bin/emacs"
e()     { pgrep emacs && emacsclient -n "$@" || emacs -nw "$@" }
ediff() { emacs -nw --eval "(ediff-files \"$1\" \"$2\")"; }
eman()  { emacs -nw --eval "(switch-to-buffer (man \"$1\"))"; }
ekill() { emacsclient --eval '(kill-emacs)'; }

alias mocp="mocp --config ~/.config/moc/config"
# alias vifm="$HOME/.config/vifm/scripts/vifmrun"
alias rtorrent="~/.config/rtorrent/start"
alias figlet="figlet -f ~/.config/figlet/fonts/ANSI\ Shadow.flf"
alias alacritty='LIBGL_ALWAYS_SOFTWARE=1 alacritty'
{ command -v nvim &> /dev/null } && alias vi='nvim' || alias vi='vim'
{ command -v neomutt &> /dev/null } && alias mutt='neomutt'
#+end_src

*** COMMENT Others

#+begin_src shell

# x11
alias merge="xrdb -merge ~/.config/xorg/xresources"

# Grub
alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"

alias ssn="sudo shutdown now"
alias sr="sudo reboot"

# Edit the fstab
alias fstab="sudo $EDITOR /etc/fstab"

# Dotfiles
alias stow='stow --no-folding -d $HOME/repo/rgomezgerardi/dotfiles -t $HOME'

# Switch between shells
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"

#switch between lightdm and sddm
alias tolightdm="sudo systemctl enable lightdm.service -f ; echo 'Lightm is active - reboot now'"
alias tosddm="sudo systemctl enable sddm.service -f ; echo 'Sddm is active - reboot now'"

#update betterlockscreen images
alias bls="betterlockscreen -u /usr/share/backgrounds/arcolinux/"
#+end_src

* Profile
:PROPERTIES:
:header-args:     :tangle .zprofile :shebang "#!/bin/zsh"
:END:
Used for executing user's commands at start, will be read when starting as a login shell.
Typically used to autostart graphical sessions and to set session-wide environment variables.

** COMMENT Start Xorg

#+begin_src shell
# Start Xorg
if [ -z "$DISPLAY" ] && [ "$XDG_VTNR"  -eq 1 ]; then
   mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/.local/share/xorg"
   exec startx "$XINITRC" -keeptty > ~/.local/share/xorg/xorg.log 2>&1
fi

# Start and add the ssh-aget private key of github
#eval "$(ssh-agent -s)"
#ssh-add ~/.config/git/ssh/arch
#trap 'kill $SSH_AGENT_PID' EXIT
#+end_src

* Enviroment
:PROPERTIES:
:header-args:     :tangle ../../.zshenv :shebang "#!/bin/zsh" :comments org
:END:

Used for setting user's environment variables; it should not contain commands that produce output or assume the shell is attached to a TTY.
When this file exists it will always be read.

** System

#+begin_src shell
#export PATH="${PATH:+${PATH}:}$(find ~/.local/bin -type d -printf '%p:' | sed 's/:$//')"
#export PATH="$PATH:$HOME/.config/emacs/bin"
#export PATH="$PATH:$HOME/.cargo/bin"
#export PATH="$PATH:$HOME/.local/share/go/bin"
# append
#path+=('/home/david/pear/bin')
# or prepend
#path=('/home/david/pear/bin' $path)
# export to sub-processes (make it inherited by child processes)
#export PATH

# export MANPAGER='nvim +Man!'
export MANWIDTH=999

# XDG
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# Zsh
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"

# Other
export LANG=en_US.UTF-8

# Flameshot
#export SDL_VIDEODRIVER=wayland
#export _JAVA_AWT_WM_NONREPARENTING=1
#export QT_QPA_PLATFORM=wayland
#export XDG_CURRENT_DESKTOP=sway
#export XDG_SESSION_DESKTOP=sway

#Ibus settings if you need them
#type ibus-setup in terminal to change settings and start the daemon
#delete the hashtags of the next lines and restart
#export GTK_IM_MODULE=ibus
#export XMODIFIERS=@im=dbus
#export QT_IM_MODULE=ibus

# export MESA_GL_VERSION_OVERRIDE=4.5
# LIBGL_ALWAYS_SOFTWARE=1
#+end_src

*** COMMENT Xorg

#+begin_src zsh
export XINITRC="$XDG_CONFIG_HOME/xorg/xinitrc"
export MODMAP="$XDG_CONFIG_HOME/xorg/xmodmap"
export RESOURCES="$XDG_CONFIG_HOME/xorg/xresources"
export SESSION="$XDG_CONFIG_HOME/xorg/xsession"
#+end_src

*** Latex

#+begin_src zsh
export MANPATH="$MANPATH:/usr/local/texlive/2023/texmf-dist/doc/man"
export INFOPATH="$INFOPATH:/usr/local/texlive/2023/texmf-dist/doc/info"
export PATH="$PATH:/usr/local/texlive/2023/bin/x86_64-linux"
#+end_src

** COMMENT Folder

#+begin_src shell 
export REPO="$HOME/repo"
export PHONE="$HOME/phone"
export FILES="/mnt/files/Ricardo"
export BOOKS="$FILES/Books"
export DOWNLOADS="$FILES/Downloads"
export VIDEOS="$FILES/Videos"
export MOVIES="$VIDEOS/Movies"
export SERIES="$VIDEOS/Series"
export DOCUMENTS="$FILES/Documents"
export NOTE="$DOCUMENTS/note"
export MUSIC="$FILES/Music"
export PICTURES="$FILES/Pictures"
export PROGRAMS="$FILES/Programs"
export PROJECTS="$FILES/Projects"
export ROTYEN="$PROJECTS/godot/2d/Rotyen"
#+end_src

** COMMENT Program

#+begin_src shell
#export SHELL=zsh
# export TERM="xterm-256color"
#export TERMINAL="st"
export EDITOR="vi"
export VISUAL="emacsclient -c -a emacs"
#export IDLE="emacsclient"
#export BROWSER="brave"
export READER="zathura"
export IMAGE_VIEWER="sxiv"
#export DESKTOP_SESSION="bspwm"
#+end_src

** COMMENT Cleanup

#+begin_src shell
export WINEPREFIX="$HOME/wine/default"
export RT_HOME="$XDG_CONFIG_HOME/rtorrent"
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/starship/starship.toml"
#+end_src

