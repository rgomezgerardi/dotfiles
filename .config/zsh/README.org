#+TITLE: Zsh Custom Configuration
#+AUTHOR: Ricardo Gomez
#+EMAIL: rgomezgerardi@gmail.com

* Runcom
:PROPERTIES:
:header-args:     :tangle .zshrc :shebang "#!/bin/zsh"
:END:
Run Commands

#+begin_src shell
# Source
# [ -f "$XDG_CONFIG_HOME/zsh/.zshalias" ] && source "$XDG_CONFIG_HOME/zsh/.zshalias"
source "$ZDOTDIR/.zshalias" 
source "$ZDOTDIR/.zshprompt" 

# source "zsh-exports"
# source "zsh-vim-mode"
# source "zsh-aliases"
# source "zsh-prompt"

# Add custom funtions completion
fpath+="$ZDOTDIR/completion/"

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# History
mkdir -p "$XDG_CACHE_HOME/zsh"
HISTFILE="$XDG_CACHE_HOME/zsh/histfile"
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# Enable colors
autoload -Uz colors && colors

# Basic auto/tab completion
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select
#zstyle ':completion::complete:lsof:*' menu yes select
zmodload zsh/complist
_comp_options+=(globdots)		# Include hidden files.

# Use case-insensitive and partial completion
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
setopt no_list_ambiguous
zstyle ":completion:*:descriptions" format "%B%d%b"

# Expand Global Alias
globalias() {
   if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then
     zle _expand_alias
     zle expand-word
   fi
   zle self-insert
}
zle -N globalias
bindkey " " globalias
bindkey "^ " magic-space           # control-space to bypass completion
bindkey -M isearch " " magic-space # normal space during searches


# some useful options (man zshoptions)
setopt autocd  # Automatically cd into directories by just typing the directory name
setopt autopushd # Keep a directory stack of all the directories you cd to in a session
setopt pushdignoredups  # Use Git-like -N instead of the default +N
setopt autocd extendedglob nomatch menucomplete notify

setopt interactive_comments
stty stop undef		# Disable ctrl-s to freeze terminal.
zle_highlight=('paste:none')

# beeping is annoying
# unsetopt BEEP

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# FZF 
# TODO update for mac
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/doc/fzf/examples/completion.zsh ] && source /usr/share/doc/fzf/examples/completion.zsh
[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] && source /usr/share/doc/fzf/examples/key-bindings.zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# export FZF_DEFAULT_COMMAND='rg --hidden -l ""'

compinit

# Speedy keys
xset r rate 210 60

# For QT Themes
export QT_QPA_PLATFORMTHEME=qt5ct

eval "$(zoxide init zsh)"
#+end_src

** Key-bindings

#+begin_src shell
# bindkey -s '^o' 'ranger^M'
# bindkey -s '^f' 'zi^M'
# bindkey -s '^s' 'ncdu^M'
# bindkey -s '^n' 'nvim $(fzf)^M'
# bindkey -s '^v' 'nvim\n'
# bindkey -s '^z' 'zi^M'
# bindkey '^[[P' delete-char
# bindkey "^p" up-line-or-beginning-search # Up
# bindkey "^n" down-line-or-beginning-search # Down
# bindkey "^k" up-line-or-beginning-search # Up
# bindkey "^j" down-line-or-beginning-search # Down
# bindkey -r "^u"
# bindkey -r "^d"
#+end_src

** COMMENT Vi

#+begin_src shell
# vi mode
bindkey -v
export KEYTIMEOUT=1

# Yank and Paste to the system clipboard
function x11-clip-wrap-widgets() {
    # NB: Assume we are the first wrapper and that we only wrap native widgets
    # See zsh-autosuggestions.zsh for a more generic and more robust wrapper
    local copy_or_paste=$1
    shift

    for widget in $@; do
        # Ugh, zsh doesn't have closures
        if [[ $copy_or_paste == "copy" ]]; then
            eval "
            function _x11-clip-wrapped-$widget() {
                zle .$widget
                xclip -in -selection clipboard <<<\$CUTBUFFER
            }
            "
        else
            eval "
            function _x11-clip-wrapped-$widget() {
                CUTBUFFER=\$(xclip -out -selection clipboard)
                zle .$widget
            }
            "
        fi

        zle -N $widget _x11-clip-wrapped-$widget
    done
}

local copy_widgets=(
    vi-yank vi-yank-eol vi-delete vi-backward-kill-word vi-change-whole-line
)
local paste_widgets=(
    vi-put-{before,after}
)

# NB: can atm. only wrap native widgets
x11-clip-wrap-widgets copy $copy_widgets
x11-clip-wrap-widgets paste  $paste_widgets

# Use vim keys in tab complete menu
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

# Jump to beginning using H and the end using L in NORMAL mode
bindkey -M vicmd 'g' beginning-of-line
bindkey -M vicmd 'G' end-of-line

# Change cursor shape for different vi modes
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select

zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
	#zle-keymap-select 'beam'  # Start with beam shape cursor on zsh startup and after every command.
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.



zle-line-init() { }
## Use vifm to switch directories and bind it to ctrl-o
#vifmcd () {
#    tmp="$(mktemp)"
#    vifm --choose-dir="$tmp" "$@"
#    if [ -f "$tmp" ]; then
#        dir="$(cat "$tmp")"
#        rm -f "$tmp"
#        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
#    fi
#}
#bindkey -s '^o' 'vifmcd\n'

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# bindkey -e will be emacs mode
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect '^h' vi-backward-char
bindkey -M menuselect '^k' vi-up-line-or-history
bindkey -M menuselect '^l' vi-forward-char
bindkey -M menuselect '^j' vi-down-line-or-history
bindkey -M menuselect '^[[Z' vi-up-line-or-history
bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.
#+end_src

** Plugins
For more plugins: https://github.com/unixorn/awesome-zsh-plugins
More completions https://github.com/zsh-users/zsh-completions

#+begin_src shell
# zsh_add_plugin "zsh-users/zsh-autosuggestions"
# zsh_add_plugin "zsh-users/zsh-syntax-highlighting"
# zsh_add_plugin "hlissner/zsh-autopair"
# zsh_add_completion "esc/conda-zsh-completion" false
#+end_src

* Enviroment
:PROPERTIES:
:header-args:     :tangle .zshenv :shebang "#!/bin/zsh"
:END:

** System

#+begin_src shell
export PATH="${PATH:+${PATH}:}$(find ~/.local/bin -type d -printf '%p:' | sed 's/:$//')"
export PATH="$PATH:$HOME/.config/emacs/bin"
export PATH="$PATH:$HOME/.cargo/bin"
export PATH="$PATH:$HOME/.local/share/go/bin"

# export MANPAGER='nvim +Man!'
export MANWIDTH=999

#Ibus settings if you need them
#type ibus-setup in terminal to change settings and start the daemon
#delete the hashtags of the next lines and restart
#export GTK_IM_MODULE=ibus
#export XMODIFIERS=@im=dbus
#export QT_IM_MODULE=ibus
#+end_src

** Program

#+begin_src shell
#export SHELL=zsh
export TERMINAL="st"
export EDITOR="nvim"
export IDLE="emacsclient"
#export IDLE="emacsclient -c -a emacs"
export BROWSER="brave"
export READER="zathura"
export IMAGE_VIEWER="sxiv"

export DESKTOP_SESSION="bspwm"

# Wine
export WINEPREFIX="$HOME/Wine/Default"

# rTorrent
export RT_HOME="$XDG_CONFIG_HOME/rtorrent"

# export MESA_GL_VERSION_OVERRIDE=4.5

# Ranger
#export RANGER_LOAD_DEFAULT_RC=FALSE
#+end_src

** Folder

#+begin_src shell 
export GIT="$HOME/documents/git"
export PHONE="$HOME/phone"

export FILES="/mnt/files/Ricardo"
export BOOKS="$FILES/Books"
export DOWNLOADS="$FILES/Downloads"

export VIDEOS="$FILES/Videos"
export MOVIES="$VIDEOS/Movies"
export SERIES="$VIDEOS/Series"

export DOCUMENTS="$FILES/Documents"
export NOTES="$DOCUMENTS/Notes"

export MUSIC="$FILES/Music"
export PICTURES="$FILES/Pictures"
export PROGRAMS="$FILES/Programs"
export PROJECTS="$FILES/Projects"
export ROTYEN="$PROJECTS/godot/2d/Rotyen"
#+end_src

* Profile
:PROPERTIES:
:header-args:     :tangle ../../.zprofile :shebang "#!/bin/zsh"
:END:

** Global Variables 

#+begin_src shell
# XDG
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# X11
export XINITRC="$XDG_CONFIG_HOME/xorg/xinitrc"
export MODMAP="$XDG_CONFIG_HOME/xorg/xmodmap"
export RESOURCES="$XDG_CONFIG_HOME/xorg/xresources"
export SESSION="$XDG_CONFIG_HOME/xorg/xsession"

# Zsh
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"
#+end_src

** Start Xorg

#+begin_src shell
# Start Xorg
if [ -z "$DISPLAY" ] && [ "$XDG_VTNR"  -eq 1 ]; then
   mkdir -p "${XDG_CONFIG_HOME:-$HOME/.config}/.local/share/xorg"
   exec startx "$XINITRC" -keeptty > ~/.local/share/xorg/xorg.log 2>&1
fi

# Start and add the ssh-aget private key of github
#eval "$(ssh-agent -s)"
#ssh-add ~/.config/git/ssh/arch
#trap 'kill $SSH_AGENT_PID' EXIT
#+end_src

** SSH Agent

#+begin_src shell
# Set up the SSH agent for key management.
#if eval `ssh-agent -s`; then
#    # Only want to add keys on an SSH client, not the server.
#    if [ "$HOSTNAME" == 'Z11' ]; then
#	[ -z "$SSH_TTY" ] && ssh-add "$HOME"/.ssh/rsa_{ss,sam,vm}
#    elif [ "$HOSTNAME" == 'Sam' ]; then
#	[ -z "$SSH_TTY" ] && ssh-add "$HOME/.ssh/rsa_gitsam"
#    fi
#    trap 'kill $SSH_AGENT_PID' EXIT
#fi

#{
#	# The RHEL recommended umask for much more safety when creating new files
#	# and directories. This is the equivalent of octal 700 and 600 for
#	# directories and files, respectively; drwx------ and -rw-------.
#	umask 0077
#
#	# I need this for when I use my configurations remotely, via SSH.
#	if [ -n "$SSH_TTY" ] && [ -f "$HOME/.bashrc" ]; then
#		. "$HOME/.bashrc"
#	fi
#
#	# Set up the SSH agent for key management.
#	if eval `ssh-agent -s`; then
#		# Only want to add keys on an SSH client, not the server.
#		if [ "$HOSTNAME" == 'Z11' ]; then
#			[ -z "$SSH_TTY" ] && ssh-add "$HOME"/.ssh/rsa_{ss,sam,vm}
#		elif [ "$HOSTNAME" == 'Sam' ]; then
#			[ -z "$SSH_TTY" ] && ssh-add "$HOME/.ssh/rsa_gitsam"
#		fi
#
#		trap 'kill $SSH_AGENT_PID' EXIT
#	fi
#
#	PATH+=":$HOME/bin"
#} &> /dev/null
#+end_src

* Aliasing  
:PROPERTIES:
:header-args:     :tangle .zshalias :shebang "#!/bin/zsh"
:END:

** Global

#+begin_src shell
alias -g bg="&> /dev/null &"
#+end_src

** Suffix

#+begin_src shell
alias -s txt="$EDITOR"
alias -s {jpg,png,bmp}="$IMAGE_VIEWER"
alias -s md="$IDlE"
#+end_src

** Simple
*** Color Support
	
#+begin_src shell
if [ -x /usr/bin/dircolors ]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	alias ls='ls --color=auto'
	alias dir='dir --color=auto'
	alias vdir='vdir --color=auto'
	alias grep='grep --color=auto'
	alias egrep='egrep --color=auto'
	alias fgrep='fgrep --color=auto'
fi
#+end_src

*** Flags

#+begin_src shell
alias cp="cp --interactive --verbose"
alias mv="mv --interactive --verbose"
alias rm="rm --verbose"
alias df='df --human-readable'
alias lsblk="lsblk --fs"
alias umount="umount --verbose --recursive --force"
alias free="free --mebi --total"
alias wget="wget --continue"
alias rsync="rsync --human-readable --progress --verbose"
alias ffmpeg='ffmpeg -hide_banner -y'
alias mpv="mpv --player-operation-mode=pseudo-gui"
alias rg="rg --sort path"
#+end_src

*** Package Manager
**** Arch

#+begin_src shell
alias pacman="sudo pacman --color auto"
alias upgrade='sudo pacman -Syyu'
# alias install='sudo pacman -Syu && sudo pacman -Syu'
alias refresh='sudo pacman -Syy'
# alias remove='sudo pacman -Rsn'
alias pacsyu='sudo pacman -Syyu'			# Update only standard pkgs
alias yaysua='yay -Sua --noconfirm'			# Update only AUR pkgs
alias yaysyu='yay -Syu --noconfirm'			# Update standard pkgs and AUR pkgs
alias unlock='sudo rm /var/lib/pacman/db.lck'
alias rmpacmanlock="sudo rm /var/lib/pacman/db.lck"
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'	# Remove orphaned packages
#alias mirror1='sudo reflector --verbose --latest 30 --sort rate --save /etc/pacman.d/mirrorlist'
alias mirror1='sudo reflector --verbose --fastest 20 --latest 20 --number 20 --sort rate --save /etc/pacman.d/mirror'
alias mirror2='sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirror'	# Get fastest mirrors
alias mirror3='sudo pacman-mirrors -g'
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 30 --number 10 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 30 --number 10 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 30 --number 10 --sort age --save /etc/pacman.d/mirrorlist"
#our experimental - best option for the moment
alias mirrorx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 5 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"
alias mirrorxx="sudo reflector --age 6 --latest 20  --fastest 20 --threads 20 --sort rate --protocol https --save /etc/pacman.d/mirrorlist"

alias ram='rate-mirrors --allow-root arch | sudo tee /etc/pacman.d/mirrorlist'
# paru as aur helper - updates everything
alias pksyua="paru -Syu --noconfirm"
alias upall="paru -Syu --noconfirm"

#Cleanup orphaned packages
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'

#skip integrity check
alias paruskip='paru -S --mflags --skipinteg'
alias yayskip='yay -S --mflags --skipinteg'
alias trizenskip='trizen -S --skipinteg'

#Recent Installed Packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"
alias riplong="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -3000 | nl"

# For when keys break
alias archlinx-fix-keys="sudo pacman-key --init && sudo pacman-key --populate archlinux && sudo pacman-key --refresh-keys"
#+end_src

*** Navigation

#+begin_src shell
alias ..='cd ..' 
alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../..'
alias .5='cd ../../../..'
alias .6='cd ../../../../..'

alias la='ls -a'
alias ll='ls -al'
alias l.="ls -A | egrep '^\.'"
#+end_src

*** Git

#+begin_src shell
alias dotfiles='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias rmgitcache="rm -r ~/.cache/git"
# alias m="git checkout main"
# alias s="git checkout stable"
#+end_src

*** System Info

#+begin_src shell
alias userlist="cut -d: -f1 /etc/passwd"
alias workspaces='prop -root _NET_DESKTOP_NAMES'
alias desktops="ls /usr/share/xsessions"
alias monitors="xrandr -q"

alias whichvga="arcolinux-which-vga"
alias probe="sudo -E hw-probe -all -upload"
alias hw="hwinfo --short"
alias microcode='grep . /sys/devices/system/cpu/vulnerabilities/*'

#ps
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias psmem='ps auxf | sort -nr -k 4 | head -5'
alias pscpu='ps auxf | sort -nr -k 3 | head -5'

# systmectl
alias sysfailed="systemctl list-units --failed"
alias syslistenabled="systemctl list-unit-files --state=enabled"
#+end_src

*** Mount and Umount Devices

#+begin_src shell
alias mount-iso='sudo mount -o loop --target /mnt/iso --source'
alias mount-usb='sudo mount -o loop --target /mnt/usb --source /dev/sdb'
alias mount-dvd='sudo mount -o ro,loop --target /mnt/dvd --source /dev/sr0'
alias mount-phone="aft-mtp-mount $PHONE"

alias umount-iso='sudo umount /mnt/iso'
alias umount-usb='udiskie-umount /mnt/PENDRIVE'
alias umount-dvd='sudo umount /mnt/dvd'
alias umount-phone="fusermount -u $PHONE"
#+end_src

*** Youtube-DL

#+begin_src shell
alias yt='youtube-dl'
alias yta='yt --extract-audio --audio-format mp3 --audio-quality 192k'
alias yta-aac="yt --extract-audio --audio-format aac "
alias yta-best="yt --extract-audio --audio-format best "
alias yta-flac="yt --extract-audio --audio-format flac "
alias yta-m4a="yt --extract-audio --audio-format m4a "
alias yta-mp3="yt --extract-audio --audio-format mp3 "
alias yta-opus="yt --extract-audio --audio-format opus "
alias yta-vorbis="yt --extract-audio --audio-format vorbis "
alias yta-wav="yt --extract-audio --audio-format wav "
alias ytv="yt --format 'best[ext = mp4][height <= 480]'"
alias ytv-best="yt --format bestvideo+bestaudio "
#+end_src

*** Security

#+begin_src shell
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
alias gpg-check-fix="gpg2 --keyserver-options auto-key-retrieve --verify"
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"
alias fix-keyserver="[ -d ~/.gnupg ] || mkdir ~/.gnupg ; cp /etc/pacman.d/gnupg/gpg.conf ~/.gnupg/ ; echo 'done'"
#+end_src

*** Maintenance

#+begin_src shell
alias jctl='journalctl -p 3 -xb'
alias big="expac -H M '%m\t%n' | sort -h | nl"
alias downgrada="sudo downgrade --ala-url https://ant.seedhost.eu/arcolinux/"
alias unhblock="hblock -S none -D none"
alias update-fc='sudo fc-cache -fv'

#fixes
alias fix-permissions="sudo chown -R $USER:$USER ~/.config ~/.local"
alias keyfix="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias key-fix="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fixkey="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fix-key="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"
alias fix-sddm-config="/usr/local/bin/arcolinux-fix-sddm-config"
alias fix-pacman-conf="/usr/local/bin/arcolinux-fix-pacman-conf"
alias fix-pacman-keyserver="/usr/local/bin/arcolinux-fix-pacman-gpg-conf"
#+end_src

*** Others

#+begin_src shell
# alias emacs="~/.local/bin/emacs"
alias mocp="mocp --config ~/.config/moc/config"
# alias vifm="$HOME/.config/vifm/scripts/vifmrun"
alias rtorrent="~/.config/rtorrent/start"
alias figlet="figlet -f ~/.config/figlet/fonts/ANSI\ Shadow.flf"

{ command -v nvim &> /dev/null } && alias vi='nvim' || alias vi='vim'
{ command -v neomutt &> /dev/null } && alias mutt='neomutt'

# x11
alias merge="xrdb -merge ~/.config/xorg/xresources"

# Grub
alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"

alias ssn="sudo shutdown now"
alias sr="sudo reboot"

# Edit the fstab
alias fstab="sudo $EDITOR /etc/fstab"

# Dotfiles
alias stow='stow --no-folding -d $HOME/documents/git/rgomezgerardi/dotfiles -t $HOME'

# Switch between shells
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"

#switch between lightdm and sddm
alias tolightdm="sudo systemctl enable lightdm.service -f ; echo 'Lightm is active - reboot now'"
alias tosddm="sudo systemctl enable sddm.service -f ; echo 'Sddm is active - reboot now'"

#update betterlockscreen images
alias bls="betterlockscreen -u /usr/share/backgrounds/arcolinux/"
#+end_src

* Prompt
:PROPERTIES:
:header-args:     :tangle .zshprompt :shebang "#!/bin/zsh"
:END:

#+begin_src shell
# # autoload vcs
# autoload -Uz vcs_info

# # enable only git 
# zstyle ':vcs_info:*' enable git 

# # setup a hook that runs before every prompt. 
# precmd_vcs_info() { vcs_info }
# precmd_functions+=( precmd_vcs_info )
# setopt prompt_subst

# # add a function to check for untracked files in the directory.
# # from https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
# zstyle ':vcs_info:git*+set-message:*' hooks git-untracked

# +vi-git-untracked(){
#     if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
#         git status --porcelain | grep '??' &> /dev/null ; then
#         # This will show the marker if there are any untracked files in repo.
#         # If instead you want to show the marker only if there are untracked
#         # files in $PWD, use:
#         #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
#         hook_com[staged]+='!' # signify new files with a bang
#     fi
# }

# zstyle ':vcs_info:*' check-for-changes true
# # zstyle ':vcs_info:git:*' formats " %r/%S %b %m%u%c "
# zstyle ':vcs_info:git:*' formats " %{$fg[blue]%}(%{$fg[red]%}%m%u%c%{$fg[yellow]%}%{$fg[magenta]%} %b%{$fg[blue]%})"

PS1="%F{#000000}%K{#f0f0f0}  %k%f%F{#f0f0f0}%K{#1793d1}%k%f%F{#f0f0f0}%K{#1793d1} %B%4(~,../%3~,%~)%b %k%f%F{#1793d1}%f "

# # format our main prompt for hostname current folder, and permissions.
# PROMPT="%B%{$fg[blue]%}[%{$fg[white]%}%n%{$fg[red]%}@%{$fg[white]%}%m%{$fg[blue]%}] %(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )%{$fg[cyan]%}%c%{$reset_color%}"
# # PROMPT="%{$fg[green]%}%n@%m %~ %{$reset_color%}%#> "
# PROMPT+="\$vcs_info_msg_0_ "
#+end_src

** TODO  look into this for more colors
# https://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
# also ascii escape codes

* COMMENT Function

#+begin_src shell :shebang "#!/bin/zsh"
function add-plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
		source "$ZDOTDIR/plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
		source "$ZDOTDIR/plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function update-plugins() {
	find "$ZDOTDIR/plugins" -type d -exec test -e '{}/.git' ';' -print0 | xargs -I {} -0 git -C {} pull -q
}

function add-completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
        [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
    fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}
#+end_src

